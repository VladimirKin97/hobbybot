import os
import logging
import asyncio
from datetime import datetime

import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# --- Initialization ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
if not BOT_TOKEN or not DATABASE_URL:
    logging.error(
        f"Missing env vars: BOT_TOKEN={'set' if BOT_TOKEN else 'unset'}, DATABASE_URL={'set' if DATABASE_URL else 'unset'}"
    )
    raise RuntimeError("Environment variables BOT_TOKEN and DATABASE_URL must be set")

logging.info("Using DATABASE_URL = %s", DATABASE_URL)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# In-memory user state
user_states: dict[int, dict] = {}

# --- Keyboards ---
main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
        [types.KeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é")]
    ],
    resize_keyboard=True
)

def get_back_button() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

def location_request_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def radius_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="3"), KeyboardButton(text="5")],
            [KeyboardButton(text="10"), KeyboardButton(text="20")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def search_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîé –ó–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º")],
            [KeyboardButton(text="üìç –ü–æ—Ä—É—á –∑—ñ –º–Ω–æ—é")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def event_join_kb(event_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üôã –î–æ–ª—É—á–∏—Ç–∏—Å—è", callback_data=f"join:{event_id}")]
        ]
    )

# --- Database helpers ---
async def get_user_from_db(user_id: int) -> asyncpg.Record | None:
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        return await conn.fetchrow(
            "SELECT * FROM users WHERE telegram_id::text = $1",
            str(user_id)
        )
    finally:
        await conn.close()

async def save_user_to_db(
    user_id: int,
    phone: str,
    name: str,
    city: str,
    photo: str,
    interests: str
):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        await conn.execute(
            """
            INSERT INTO users (telegram_id, phone, name, city, photo, interests)
            VALUES ($1,$2,$3,$4,$5,$6)
            ON CONFLICT (telegram_id) DO UPDATE SET
              phone     = EXCLUDED.phone,
              name      = EXCLUDED.name,
              city      = EXCLUDED.city,
              photo     = EXCLUDED.photo,
              interests = EXCLUDED.interests
            """,
            user_id, phone, name, city, photo, interests
        )
    finally:
        await conn.close()

async def save_event_to_db(
    user_id: int,
    creator_name: str,
    creator_phone: str,
    title: str,
    description: str,
    date: datetime,
    location: str,
    capacity: int,
    needed_count: int,
    status: str,
    location_lat: float | None = None,
    location_lon: float | None = None
):
    """–°—Ç–≤–æ—Ä—é—î –ø–æ–¥—ñ—é –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏. –ü–æ–≤–µ—Ä—Ç–∞—î id —ñ created_at."""
    logging.info("‚Üí save_event_to_db: user_id=%s title=%r status=%r", user_id, title, status)
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        row = await conn.fetchrow(
            """
            INSERT INTO events (
                user_id, creator_name, creator_phone, title,
                description, date, location, capacity, needed_count, status,
                location_lat, location_lon
            ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
            RETURNING id, created_at
            """,
            user_id, creator_name or '', creator_phone or '',
            title, description, date, location,
            capacity, needed_count, status,
            location_lat, location_lon
        )
        logging.info("‚Üê saved event id=%s created_at=%s", row["id"], row["created_at"])
        return row
    finally:
        await conn.close()

async def find_events_near(lat: float, lon: float, radius_km: float, limit: int = 10):
    """–ü–æ—à—É–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–¥—ñ–π –∑–∞ —Ä–∞–¥—ñ—É—Å–æ–º (Haversine)."""
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        rows = await conn.fetch(
            """
            WITH params AS (SELECT $1::float AS lat, $2::float AS lon, $3::float AS r)
            SELECT e.*,
                   (6371 * acos(
                       cos(radians(p.lat)) * cos(radians(e.location_lat)) *
                       cos(radians(e.location_lon) - radians(p.lon)) +
                       sin(radians(p.lat)) * sin(radians(e.location_lat))
                   )) AS dist_km
            FROM events e, params p
            WHERE e.status='active'
              AND e.location_lat IS NOT NULL
              AND e.location_lon IS NOT NULL
              AND (6371 * acos(
                       cos(radians(p.lat)) * cos(radians(e.location_lat)) *
                       cos(radians(e.location_lon) - radians(p.lon)) +
                       sin(radians(p.lat)) * sin(radians(e.location_lat))
                  )) <= p.r
            ORDER BY dist_km ASC
            LIMIT $4
            """,
            lat, lon, radius_km, limit
        )
        return rows
    finally:
        await conn.close()

# --- Debug commands ---
@dp.message(Command("dbinfo"))
async def cmd_dbinfo(message: types.Message):
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        row = await conn.fetchrow("""
            SELECT current_database() AS db,
                   current_user AS usr,
                   current_schema() AS sch,
                   current_setting('search_path') AS search_path,
                   current_setting('server_version') AS ver,
                   current_setting('TimeZone', true) AS tz;
        """)
        await conn.close()
        await message.answer(
            f"üóÑ DB={row['db']}\nüë§ user={row['usr']}\nüìö schema={row['sch']}\n"
            f"üîé search_path={row['search_path']}\nüêò pg={row['ver']}\nüåç tz={row['tz']}"
        )
    except Exception as e:
        await message.answer(f"‚ùå DB error: {e}")

@dp.message(Command("test_event"))
async def cmd_test_event(message: types.Message):
    try:
        r = await save_event_to_db(
            user_id=message.from_user.id,
            creator_name=message.from_user.full_name or "",
            creator_phone="",
            title="BOT TEST",
            description="insert from /test_event",
            date=datetime.utcnow(),
            location="N/A",
            capacity=1,
            needed_count=1,
            status="active",
            location_lat=50.45,
            location_lon=30.523
        )
        await message.answer(f"‚úÖ events.id={r['id']} created_at={r['created_at']}")
    except Exception as e:
        await message.answer(f"‚ùå insert error: {e}")

# --- Handlers ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    state = user_states.setdefault(user_id, {})
    try:
        user = await get_user_from_db(user_id)
    except Exception as e:
        logging.error("DB connection error: %s", e)
        state['step'] = 'menu'
        await message.answer(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ –ë–î, —Ä–æ–±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–∞.",
            reply_markup=main_menu
        )
        return
    if user:
        state['step'] = 'menu'
        await message.answer(
            f"üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞–∑–∞–¥, {user['name']}! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=main_menu
        )
    else:
        state.clear()
        state.update({'step': 'name', 'phone': None})
        await message.answer(
            "üëã –í—ñ—Ç–∞—é! –î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ –ø—Ä–æ—Ñ—ñ–ª—å. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:\n"
            "<i>–Ü–º‚Äô—è –±—É–¥–µ –≤–∏–¥–Ω–æ –≤ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ —É—á–∞—Å—Ç—å.</i>",
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
    return

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    state = user_states.setdefault(user_id, {})
    if state.get('step') != 'photo':
        return
    state['photo'] = message.photo[-1].file_id
    state['step'] = 'interests'
    await message.answer(
        "üéØ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):\n"
        "<i>–ù–∞ –æ—Å–Ω–æ–≤—ñ —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤ –º–∏ –ø—ñ–¥–±–∏—Ä–∞—Ç–∏–º–µ–º–æ –ø–æ–¥—ñ—ó –¥–ª—è –≤–∞—Å.</i>",
        reply_markup=get_back_button(),
        parse_mode="HTML"
    )

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {'step': 'menu'}
    await message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é", reply_markup=main_menu)

@dp.message(F.text)
async def handle_steps(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    state = user_states.setdefault(user_id, {})
    step = state.get('step')
    logging.debug("handle_steps: step=%s, text=%s", step, text)

    # === –ú–ï–ù–Æ ===
    if text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é":
        if step == 'name':
            return
        user = await get_user_from_db(user_id)
        if not user:
            await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        state.clear()
        state.update({
            'step': 'create_event_title',
            'creator_name': user.get('name') if user else '',
            'creator_phone': user.get('phone') if user else ''
        })
        await message.answer(
            "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:\n"
            "<i>–ü–æ—à—É–∫–∞—á—ñ –±—É–¥—É—Ç—å —à—É–∫–∞—Ç–∏ –≤–∞—à—É –ø–æ–¥—ñ—é –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, "
            "—Ç–æ–º—É –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω–∞–∑–≤–∞ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫ —ñ —Ç–æ—á–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—É—Ç—å.</i>",
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return

    if text == "üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é" and step in (None, 'menu'):
        state['step'] = 'search_menu'
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É:", reply_markup=search_menu_kb())
        return

    # === –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø ===
    if step == 'name':
        state['name'] = text
        state['step'] = 'city'
        await message.answer(
            "üèô –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:\n"
            "<i>–ú—ñ—Å—Ç–æ –¥–æ–ø–æ–º–æ–∂–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –ø–æ–¥—ñ—ó.</i>",
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return

    if step == 'city':
        state['city'] = text
        state['step'] = 'photo'
        await message.answer(
            "üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Å–≤—ñ—Ç–ª–∏–Ω—É:\n"
            "<i>–§–æ—Ç–æ –∑—Ä–æ–±–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –±—ñ–ª—å—à –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–º –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—ñ–≤.</i>",
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return

    if step == 'interests':
        state['interests'] = [i.strip() for i in text.split(',')]
        try:
            await save_user_to_db(
                user_id=user_id,
                phone=state.get('phone',''),
                name=state.get('name',''),
                city=state.get('city',''),
                photo=state.get('photo',''),
                interests=', '.join(state['interests'])
            )
            await message.answer('‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', reply_markup=main_menu)
        except Exception as e:
            logging.error('Error saving profile: %s', e)
            await message.answer('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å.', reply_markup=main_menu)
        state['step'] = 'menu'
        return

    # === –ü–†–û–§–Ü–õ–¨ ===
    if step == 'menu' and text == 'üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å':
        user = await get_user_from_db(user_id)
        if user and user.get('photo'):
            await message.answer_photo(
                photo=user['photo'],
                caption=(
                    f"üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\nüìõ –Ü–º'—è: {user['name']}\n"
                    f"üèô –ú—ñ—Å—Ç–æ: {user['city']}\nüéØ –Ü–Ω—Ç–µ—Ä–µ—Å–∏: {user['interests']}"
                ),
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[
                        [types.KeyboardButton(text='‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å'), types.KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]
                    ],
                    resize_keyboard=True
                )
            )
        else:
            await message.answer('‚ùó –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=main_menu)
        return

    if step == 'menu' and text == '‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å':
        user = await get_user_from_db(user_id)
        state.clear()
        state.update({'step': 'name', 'phone': user.get('phone','') if user else ''})
        await message.answer(
            "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:\n<i>–¶–µ —ñ–º‚Äô—è –±–∞—á–∏—Ç–∏–º—É—Ç—å –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∏.</i>",
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return

    # === –°–¢–í–û–†–ï–ù–ù–Ø –ü–û–î–Ü–á ===
    if step == 'create_event_title':
        state['event_title'] = text
        state['step'] = 'create_event_description'
        await message.answer(
            'üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–æ–¥—ñ—ó:\n'
            '<i>–û–ø–∏—à—ñ—Ç—å —É –∫—ñ–ª—å–∫–æ—Ö —Ä–µ—á–µ–Ω–Ω—è—Ö, —â–æ –±—É–¥–µ –≤—ñ–¥–±—É–≤–∞—Ç–∏—Å—è, —â–æ–± –ø–æ—à—É–∫–∞—á—ñ –æ—Ö–æ—á–µ –ø—Ä–∏—î–¥–Ω—É–≤–∞–ª–∏—Å—è.</i>',
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return

    if step == 'create_event_description':
        state['event_description'] = text
        state['step'] = 'create_event_date'
        await message.answer(
            'üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD HH:MM\n'
            '<i>–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 2025-10-12 19:30. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º—ñ—Å—Ü–µ–≤–∏–π —á–∞—Å.</i>',
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return

    if step == 'create_event_date':
        try:
            dt = datetime.strptime(text, '%Y-%m-%d %H:%M')
        except ValueError:
            await message.answer('‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!\n<i>–ü—Ä–∏–∫–ª–∞–¥: 2025-10-12 19:30</i>',
                                 reply_markup=get_back_button(), parse_mode="HTML")
            return
        state['event_date'] = dt
        state['step'] = 'create_event_location'
        await message.answer(
            'üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–æ—á–∫—É –ª–æ–∫–∞—Ü—ñ—ó –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –Ω–∞ –º–∞–ø—ñ —É –≤–∫–ª–∞–¥–µ–Ω–Ω—ñ.\n'
            '<i>–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—é –ø–æ—Ç–æ—á–Ω—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –æ–±—Ä–∞—Ç–∏ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç—ñ –≤—Ä—É—á–Ω—É.</i>',
            reply_markup=location_request_kb(),
            parse_mode="HTML"
        )
        return

    # –Ø–∫—â–æ –Ω–∞ –∫—Ä–æ—Ü—ñ –ª–æ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ—Å–∏–º–æ —Å–∞–º–µ –≥–µ–æ
    if step == 'create_event_location':
        await message.answer(
            '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ ‚§µÔ∏è\n'
            '<i>–£ –≤–∫–ª–∞–¥–µ–Ω–Ω—ñ Telegram –º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –±—É–¥—å-—è–∫—É —Ç–æ—á–∫—É –Ω–∞ –º–∞–ø—ñ.</i>',
            reply_markup=location_request_kb(),
            parse_mode="HTML"
        )
        return

    if step == 'create_event_location_name':
        state['event_location'] = text  # –ª—é–¥–∏–Ω–æ—á–∏—Ç–Ω–∞ –∞–¥—Ä–µ—Å–∞/–º—ñ—Å—Ü–µ
        state['step'] = 'create_event_capacity'
        await message.answer(
            'üë• –°–∫—ñ–ª—å–∫–∏ –≤—Å—å–æ–≥–æ –º—ñ—Å—Ü—å?\n'
            '<i>–í–∫–∞–∂—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –º—ñ—Å—Ç–∫—ñ—Å—Ç—å –ø–æ–¥—ñ—ó.</i>',
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return

    if step == 'create_event_capacity':
        try:
            cap = int(text)
            if cap <= 0:
                raise ValueError
        except ValueError:
            await message.answer('‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ.',
                                 reply_markup=get_back_button())
            return
        state['capacity'] = cap
        state['step'] = 'create_event_needed'
        await message.answer(
            'üë§ –°–∫—ñ–ª—å–∫–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —à—É–∫–∞—î—Ç–µ?\n'
            '<i>–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –≤–∞–º –±—Ä–∞–∫—É—î –¥–æ –ø–æ–≤–Ω–æ—ó –º—ñ—Å—Ç–∫–æ—Å—Ç—ñ.</i>',
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return

    if step == 'create_event_needed':
        logging.debug('Entering create_event_needed with state %s', state)
        try:
            need = int(text)
            cap = state['capacity']
            if need <= 0 or need > cap:
                raise ValueError
        except ValueError:
            await message.answer(f"‚ùó –í—ñ–¥ 1 –¥–æ {state['capacity']}",
                                 reply_markup=get_back_button())
            return
        state['needed_count'] = need
        # preview event
        await message.answer(
            "üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—É –ø–æ–¥—ñ—é:\n\n"
            f"üìõ {state['event_title']}\n"
            f"‚úèÔ∏è {state['event_description']}\n"
            f"üìÖ {state['event_date'].strftime('%Y-%m-%d %H:%M')}\n"
            f"üìç {state.get('event_location','‚Äî')} "
            f"({state.get('event_lat','?')}, {state.get('event_lon','?')})\n"
            f"üë• –ú—ñ—Å—Ç–∫—ñ—Å—Ç—å: {state['capacity']}\n"
            f"üë§ –®—É–∫–∞—î–º–æ: {state['needed_count']}\n\n"
            "<i>–Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –ø—É–±–ª—ñ–∫—É–π—Ç–µ. –ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —ñ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏.</i>",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text='‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏'), types.KeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏')],
                    [types.KeyboardButton(text='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')],
                    [types.KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]
                ], resize_keyboard=True
            ),
            parse_mode="HTML"
        )
        state['step'] = 'publish_confirm'
        return

    if step == 'publish_confirm':
        logging.debug("PUBLISH_CONFIRM: state=%s, text=%r", state, text)

        if text == '‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏':
            try:
                await save_event_to_db(
                    user_id=user_id,
                    creator_name=state.get('creator_name', ''),
                    creator_phone=state.get('creator_phone', '') or '',
                    title=state['event_title'],
                    description=state['event_description'],
                    date=state['event_date'],
                    location=state.get('event_location', ''),
                    capacity=state['capacity'],
                    needed_count=state['needed_count'],
                    status='active',
                    location_lat=state.get('event_lat'),
                    location_lon=state.get('event_lon')
                )
                logging.info("Event published (inserted): %s by user %s", state['event_title'], user_id)
                await message.answer("üöÄ –í–∞—à–∞ –ø–æ–¥—ñ—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—à—É–∫–∞—á–∞–º!", reply_markup=main_menu)
            except Exception as e:
                logging.error("Publish failed: %s", e)
                await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ–¥—ñ—ó: {e}", reply_markup=main_menu)
            state['step'] = 'menu'
            return

        elif text == '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏':
            state['step'] = 'create_event_title'
            await message.answer(
                "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:\n"
                "<i>–ù–∞–∑–≤–∞ –º–∞—î —á—ñ—Ç–∫–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ —Å—É—Ç—å —ñ–≤–µ–Ω—Ç–∞.</i>",
                reply_markup=get_back_button(),
                parse_mode="HTML"
            )
            return

        elif text == '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏':
            await message.answer("‚ùå –í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó.", reply_markup=main_menu)
            state['step'] = 'menu'
            return

    # === –ü–û–®–£–ö ===
    if step == 'search_menu' and text == "üîé –ó–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º":
        state['step'] = 'search_keyword_wait'
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ:\n"
            "<i>–®—É–∫–∞—î–º–æ –≤ –Ω–∞–∑–≤—ñ —Ç–∞ –æ–ø–∏—Å—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–¥—ñ–π.</i>",
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return

    if step == 'search_menu' and text == "üìç –ü–æ—Ä—É—á –∑—ñ –º–Ω–æ—é":
        state['step'] = 'search_geo_wait_location'
        await message.answer(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:\n"
            "<i>–ú–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∞–±–æ –≤–∏–±—Ä–∞—Ç–∏ —Ç–æ—á–∫—É –Ω–∞ –º–∞–ø—ñ —É –≤–∫–ª–∞–¥–µ–Ω–Ω—ñ.</i>",
            reply_markup=location_request_kb(),
            parse_mode="HTML"
        )
        return

    if step == 'search_keyword_wait':
        kw = text
        try:
            conn = await asyncpg.connect(DATABASE_URL)
            rows = await conn.fetch(
                """
                SELECT id, title, description, date, location, capacity, needed_count, status,
                       location_lat, location_lon
                FROM events
                WHERE status = 'active'
                  AND (title ILIKE $1 OR description ILIKE $1)
                ORDER BY date ASC NULLS LAST, id DESC
                LIMIT 10
                """,
                f"%{kw}%"
            )
            await conn.close()
        except Exception as e:
            logging.error("Search error: %s", e)
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É.", reply_markup=main_menu)
            state['step'] = 'menu'
            return

        if not rows:
            await message.answer("üòï –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ —Å–ª–æ–≤–æ.", reply_markup=main_menu)
            state['step'] = 'menu'
            return

        for r in rows:
            dt = r["date"].strftime('%Y-%m-%d %H:%M') if r["date"] else "‚Äî"
            loc_line = r["location"] or (
                f"{r['location_lat']:.5f}, {r['location_lon']:.5f}"
                if r["location_lat"] is not None else "‚Äî"
            )
            text_card = (
                f"<b>{r['title']}</b> (#{r['id']})\n"
                f"üìÖ {dt}\nüìç {loc_line}\n"
                f"üë§ –®—É–∫–∞—î–º–æ: {r['needed_count']}/{r['capacity']}\n\n"
                f"{(r['description'] or '')[:300]}{'‚Ä¶' if r['description'] and len(r['description'])>300 else ''}"
            )
            await message.answer(text_card, parse_mode="HTML", reply_markup=event_join_kb(r["id"]))
        state['step'] = 'menu'
        await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ", reply_markup=main_menu)
        return

    if step == 'search_geo_wait_radius':
        try:
            radius = float(text)
        except ValueError:
            radius = 5.0  # –¥–µ—Ñ–æ–ª—Ç

        lat = state.get('search_lat')
        lon = state.get('search_lon')
        if lat is None or lon is None:
            await message.answer("–ù–µ –±–∞—á—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=location_request_kb())
            state['step'] = 'search_geo_wait_location'
            return

        rows = await find_events_near(lat, lon, radius, limit=10)
        if not rows:
            await message.answer("–ü–æ—Ä—É—á –ø–æ–¥—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòï", reply_markup=main_menu)
            state['step'] = 'menu'
            return

        for r in rows:
            dt = r["date"].strftime('%Y-%m-%d %H:%M') if r["date"] else "‚Äî"
            loc_line = r["location"] or f"{r['location_lat']:.5f}, {r['location_lon']:.5f}"
            dist = f"{r['dist_km']:.1f} –∫–º"
            text_card = (
                f"<b>{r['title']}</b> (#{r['id']}) ‚Äî {dist}\n"
                f"üìÖ {dt}\nüìç {loc_line}\n"
                f"üë§ –®—É–∫–∞—î–º–æ: {r['needed_count']}/{r['capacity']}\n\n"
                f"{(r['description'] or '')[:300]}{'‚Ä¶' if r['description'] and len(r['description'])>300 else ''}"
            )
            await message.answer(text_card, parse_mode="HTML", reply_markup=event_join_kb(r["id"]))
        state['step'] = 'menu'
        await message.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ", reply_markup=main_menu)
        return

    if step == 'search_menu' and text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        state['step'] = 'menu'
        await message.answer("–ú–µ–Ω—é:", reply_markup=main_menu)
        return

    # === –ó–ê–ì–õ–£–®–ö–ê ===
    logging.info('Unhandled step=%s text=%s', step, text)

# --- –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—ó (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø–æ—à—É–∫) ---
@dp.message(F.location)
async def handle_location(message: types.Message):
    user_id = message.from_user.id
    state = user_states.setdefault(user_id, {})
    cur = state.get('step')

    if cur == 'create_event_location':
        state['event_lat'] = message.location.latitude
        state['event_lon'] = message.location.longitude
        state['step'] = 'create_event_location_name'
        await message.answer(
            'üè∑ –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ü—è/–∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º:\n'
            '<i>–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –ø–æ—à—É–∫–∞—á–∞–º –∑–æ—Ä—ñ—î–Ω—Ç—É–≤–∞—Ç–∏—Å—è.</i>',
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return

    if cur == 'search_geo_wait_location':
        state['search_lat'] = message.location.latitude
        state['search_lon'] = message.location.longitude
        state['step'] = 'search_geo_wait_radius'
        await message.answer(
            'üìè –†–∞–¥—ñ—É—Å —É –∫–º? (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5)\n'
            '<i>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É.</i>',
            reply_markup=radius_kb(),
            parse_mode="HTML"
        )
        return

# --- Callback: join request ---
@dp.callback_query(F.data.startswith("join:"))
async def cb_join(call: types.CallbackQuery):
    event_id = int(call.data.split(":")[1])
    seeker_id = call.from_user.id
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        req = await conn.fetchrow("""
            INSERT INTO requests (event_id, seeker_id)
            VALUES ($1,$2)
            ON CONFLICT (event_id, seeker_id)
            DO UPDATE SET status='pending'
            RETURNING id
        """, event_id, seeker_id)

        ev = await conn.fetchrow("SELECT id, title, user_id FROM events WHERE id=$1", event_id)
        await conn.close()

        await call.answer("–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ‚úÖ", show_alert=False)

        if ev:
            try:
                uname = f"@{call.from_user.username}" if call.from_user.username else call.from_user.full_name
                await bot.send_message(
                    ev["user_id"],
                    f"üîî –ó–∞–ø–∏—Ç –Ω–∞ —É—á–∞—Å—Ç—å —É –ø–æ–¥—ñ—ó ‚Äú{ev['title']}‚Äù (#{ev['id']}).\n"
                    f"–í—ñ–¥: {uname} (id {seeker_id})."
                )
            except Exception as e:
                logging.warning("Organizer notification failed: %s", e)

    except Exception as e:
        logging.error("join request error: %s", e)
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}", show_alert=True)

# Entrypoint
async def main():
    logging.info('Starting polling')
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())







   



