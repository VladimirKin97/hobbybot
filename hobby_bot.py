import logging
import asyncio
import os
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart

# --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê --- #
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
user_states = {}

# --- –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û –ë–ê–ó–ò --- #
DATABASE_URL = os.getenv("DB_URL")

print("DATABASE_URL =", DATABASE_URL)
async def connect_db():
    return await asyncpg.connect(DATABASE_URL)

async def save_user_to_db(user_id, phone, name, city, photo, interests, role="–ø–æ—à—É–∫–∞—á"):
    conn = await connect_db()
    await conn.execute("""
        INSERT INTO users (telegram_id, phone, name, city, photo, interests, role)
        VALUES ($1, $2, $3, $4, $5, $6, $7)
        ON CONFLICT (telegram_id) DO UPDATE SET phone = $2, name = $3, city = $4, photo = $5, interests = $6, role = $7
    """, user_id, phone, name, city, photo, interests, role)
    await conn.close()

async def get_user_from_db(user_id):
    conn = await connect_db()
    user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)
    await conn.close()
    return user

async def save_event_to_db(user_id, title, description, date, location):
    conn = await connect_db()
    await conn.execute("""
        INSERT INTO events (creator_id, title, description, date, location)
        VALUES ($1, $2, $3, $4, $5)
    """, user_id, title, description, date, location)
    await conn.close()

async def search_events_by_interests(user_interests):
    conn = await connect_db()
    conditions = []
    params = []

    for i, kw in enumerate(user_interests):
        kw = kw.strip().lower()
        conditions.append(f"(LOWER(title) LIKE ${2 * i + 1} OR LOWER(description) LIKE ${2 * i + 2})")
        params.extend([f"%{kw}%", f"%{kw}%"])

    query = f"SELECT * FROM events WHERE {' OR '.join(conditions)}"
    results = await conn.fetch(query, *params)
    await conn.close()
    return results


# --- –ö–ù–û–ü–ö–ò --- #
main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
    ], resize_keyboard=True
)

back_button = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    user_states.setdefault(user_id, {})
    user = await get_user_from_db(user_id)
    if user:
        await message.answer(
            f"üëã –í—ñ—Ç–∞—é, {user['name']}! –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
            reply_markup=main_menu
        )
        user_states[user_id]["step"] = "menu"
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤—ñ—Ç, —Ç–∏ –ø–æ—Ç—Ä–∞–ø–∏–≤ —É Findsy! –¢—É—Ç –∑ –ª–µ–≥–∫—ñ—Å—Ç—é –∑–Ω–∞–π–¥–µ—à –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ –≤–µ—á—ñ—Ä –∞–±–æ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤ –¥–æ —Å–≤–æ—î—ó –∫–æ–º–ø–∞–Ω—ñ—ó!\n\n–®—É–∫–∞–π, —Å—Ç–≤–æ—Ä—é–π, –∑–∞–ø—Ä–æ—à—É–π, –≤–∑–∞—î–º–æ–¥—ñ–π —Ç–∞ —Å–ø—ñ–ª–∫—É–π—Å—è! üíõ",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="üìû –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å")]],
                resize_keyboard=True
            )
        )
        user_states[user_id]["step"] = "authorization"

@dp.message(F.text == "üìû –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å")
async def authorize_step(message: types.Message):
    user_id = str(message.from_user.id)
    user_states.setdefault(user_id, {})
    user_states[user_id]["step"] = "phone"
    await message.answer(
        "üì≤ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)], [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )

@dp.message(F.contact)
async def get_phone(message: types.Message):
    user_id = str(message.from_user.id)
    user_states.setdefault(user_id, {})
    raw = message.contact.phone_number
    cleaned = ''.join(filter(str.isdigit, raw))
    if cleaned.startswith('0'):
        cleaned = '38' + cleaned  # —è–∫—â–æ —Ö—Ç–æ—Å—å –≤–≤—ñ–≤ "096..."
    elif cleaned.startswith('+'):
        cleaned = cleaned.lstrip('+')  # –ø—Ä–∏–±—Ä–∞—Ç–∏ "+" —è–∫—â–æ —î
    user_states[user_id]["phone"] = cleaned

    user_states[user_id]["step"] = "name"
    await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=back_button)

@dp.message(F.text & ~F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]))
async def handle_steps(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")

    if step == "name":
        user_states[user_id]["name"] = message.text
        user_states[user_id]["step"] = "city"
        await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=back_button)

    elif step == "city":
        user_states[user_id]["city"] = message.text
        user_states[user_id]["step"] = "photo"
        await message.answer("üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Å–≤—ñ—Ç–ª–∏–Ω—É:", reply_markup=back_button)

    elif step == "interests":
        user_states[user_id]["interests"] = message.text.split(",")

        print("DEBUG –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —é–∑–µ—Ä–∞:", user_states[user_id])  
        
        await save_user_to_db(
            user_id=user_id,
            phone=user_states[user_id].get("phone"),
            name=user_states[user_id].get("name"),
            city=user_states[user_id].get("city"),
            photo=user_states[user_id].get("photo"),
            interests=", ".join(user_states[user_id].get("interests", [])),
            role="–ø–æ—à—É–∫–∞—á"
        )

@dp.message(F.photo)
async def get_photo(message: types.Message):
    user_id = str(message.from_user.id)
    if user_states.get(user_id, {}).get("step") == "photo":
        file_id = message.photo[-1].file_id
        print("üì∏ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:", file_id)  # üëà
        user_states[user_id]["photo"] = file_id
        user_states[user_id]["step"] = "interests"
        await message.answer("üéØ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É:", reply_markup=back_button)

        user_states[user_id]["step"] = "menu"
        await message.answer("‚úÖ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=main_menu)

    elif step == "menu":
        if message.text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
            user = await get_user_from_db(user_id)
            if user and user["photo"]:
                await message.answer_photo(
                    photo=user["photo"],
                    caption=f"üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n\nüìõ –Ü–º'—è: {user['name']}\nüèô –ú—ñ—Å—Ç–æ: {user['city']}\nüéØ –Ü–Ω—Ç–µ—Ä–µ—Å–∏: {user['interests']}",
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=[[types.KeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")], [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                        resize_keyboard=True
                    )
                )
            else:
                await message.answer("‚ùóÔ∏è–§–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu)

        elif message.text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å":
            user = await get_user_from_db(user_id)
            user_states[user_id] = {"step": "name", "phone": user["phone"]}
            await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:", reply_markup=back_button)

        elif message.text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é":
            user_states[user_id]["step"] = "create_event_title"
            await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:", reply_markup=back_button)

        elif step == "create_event_title":
            user_states[user_id]["event_title"] = message.text
            user_states[user_id]["step"] = "create_event_description"
            await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–æ–¥—ñ—ó:", reply_markup=back_button)

        elif step == "create_event_description":
            user_states[user_id]["event_description"] = message.text
            user_states[user_id]["step"] = "create_event_date"
            await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 25.05.2025 18:00):", reply_markup=back_button)

        elif step == "create_event_date":
            user_states[user_id]["event_date"] = message.text
            user_states[user_id]["step"] = "create_event_location"
            await message.answer("üìç –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ –ø–æ–¥—ñ—ó:", reply_markup=back_button)

        elif step == "create_event_location":
            user_states[user_id]["event_location"] = message.text
            await save_event_to_db(
                user_id=user_id,
                title=user_states[user_id]["event_title"],
                description=user_states[user_id]["event_description"],
                date=user_states[user_id]["event_date"],
                location=user_states[user_id]["event_location"]
            )
            user_states[user_id]["step"] = "menu"
            await message.answer("‚úÖ –ü–æ–¥—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=main_menu)

        elif step == "find_event_menu":
            if message.text == "üîç –ü–æ–¥—ñ—ó –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏":
                user = await get_user_from_db(user_id)
                if user and user['interests']:
                    interests_list = [i.strip().lower() for i in user['interests'].split(',')]
                    events = await search_events_by_interests(interests_list)
                    if events:
                        response = "üîç –ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–¥—ñ—ó –∑–∞ –≤–∞—à–∏–º–∏ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏:\n\n"
                        for e in events:
                            response += (
                                f"üìõ –ù–∞–∑–≤–∞: {e['title']}\n"
                                f"‚úèÔ∏è –û–ø–∏—Å: {e['description']}\n"
                                f"üìÖ –î–∞—Ç–∞: {e['date']}\n"
                                f"üìç –õ–æ–∫–∞—Ü—ñ—è: {e['location']}\n\n"
                            )
                        await message.answer(response)
                    else:
                        await message.answer("–ù–∞–∂–∞–ª—å, –ø–æ–¥—ñ–π –∑–∞ –≤–∞—à–∏–º–∏ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    await message.answer("–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤. –î–æ–¥–∞–π—Ç–µ —ó—Ö –¥–ª—è –ø–æ—à—É–∫—É –ø–æ–¥—ñ–π.")

@dp.message(F.photo)
async def get_photo(message: types.Message):
    user_id = str(message.from_user.id)
    if user_states.get(user_id, {}).get("step") == "photo":
        user_states[user_id]["photo"] = message.photo[-1].file_id
        user_states[user_id]["step"] = "interests"
        await message.answer("üéØ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É:", reply_markup=back_button)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")
    if step == "name":
        await authorize_step(message)
    elif step == "city":
        user_states[user_id]["step"] = "name"
        await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=back_button)
    elif step == "photo":
        user_states[user_id]["step"] = "city"
        await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=back_button)
    elif step == "interests":
        user_states[user_id]["step"] = "photo"
        await message.answer("üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Å–≤—ñ—Ç–ª–∏–Ω—É:", reply_markup=back_button)
    else:
        await message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu)
        user_states[user_id]["step"] = "menu"

# --- –ó–ê–ü–£–°–ö --- #
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())





   
