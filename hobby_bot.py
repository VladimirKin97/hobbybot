import os
import logging
import asyncio
from datetime import datetime

import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command

# --- Initialization ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
if not BOT_TOKEN or not DATABASE_URL:
    logging.error(
        f"Missing env vars: BOT_TOKEN={'set' if BOT_TOKEN else 'unset'}, DATABASE_URL={'set' if DATABASE_URL else 'unset'}"
    )
    raise RuntimeError("Environment variables BOT_TOKEN and DATABASE_URL must be set")

# –õ–æ–≥–∏—Ä—É–µ–º, –∫ –∫–∞–∫–æ–π –±–∞–∑–µ –º—ã –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
logging.info("Using DATABASE_URL = %s", DATABASE_URL)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# In-memory user state
user_states: dict[int, dict] = {}

# --- Keyboards ---
main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
        [types.KeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏")]
    ],
    resize_keyboard=True
)
def get_back_button() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

# --- Database helpers ---
async def get_user_from_db(user_id: int) -> asyncpg.Record | None:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id"""
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        # —á–µ—Ä–µ–∑ ::text —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î —ñ –¥–ª—è BIGINT, —ñ –¥–ª—è TEXT –∫–æ–ª–æ–Ω–æ–∫
        return await conn.fetchrow(
            "SELECT * FROM users WHERE telegram_id::text = $1",
            str(user_id)
        )
    finally:
        await conn.close()

async def save_user_to_db(
    user_id: int,
    phone: str,
    name: str,
    city: str,
    photo: str,
    interests: str
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ telegram_id"""
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        await conn.execute(
            """
            INSERT INTO users (telegram_id, phone, name, city, photo, interests)
            VALUES ($1,$2,$3,$4,$5,$6)
            ON CONFLICT (telegram_id) DO UPDATE SET
              phone     = EXCLUDED.phone,
              name      = EXCLUDED.name,
              city      = EXCLUDED.city,
              photo     = EXCLUDED.photo,
              interests = EXCLUDED.interests
            """,
            user_id, phone, name, city, photo, interests
        )
    finally:
        await conn.close()

async def save_event_to_db(
    user_id: int,
    creator_name: str,
    creator_phone: str,
    title: str,
    description: str,
    date: datetime,
    location: str,
    capacity: int,
    needed_count: int,
    status: str
):
    """–°—Ç–≤–æ—Ä—é—î –ø–æ–¥—ñ—é (insert). –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥–∞—î–º–æ —è–≤–Ω–æ ('active' –∞–±–æ 'draft')."""
    logging.info("‚Üí save_event_to_db: user_id=%s title=%r status=%r",
                 user_id, title, status)
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        row = await conn.fetchrow(
            """
            INSERT INTO events (
                user_id, creator_name, creator_phone, title,
                description, date, location, capacity, needed_count, status
            ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
            RETURNING id, created_at
            """,
            user_id, creator_name, creator_phone or '',
            title, description, date, location,
            capacity, needed_count, status
        )
        logging.info("‚Üê saved event id=%s created_at=%s", row["id"], row["created_at"])
        return row
    finally:
        await conn.close()

async def publish_event(user_id: int, title: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è –Ω–∞ 'active' (–µ—Å–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫)."""
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        await conn.execute(
            "UPDATE events SET status='active' WHERE user_id::text = $1 AND title = $2",
            str(user_id), title
        )
    finally:
        await conn.close()

async def cancel_event(user_id: int, title: str):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        await conn.execute(
            "UPDATE events SET status='cancelled' WHERE user_id::text = $1 AND title = $2",
            str(user_id), title
        )
    finally:
        await conn.close()

# --- Debug commands (–∑—Ä—É—á–Ω–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç—É–≤–∞—Ç–∏ –ø—Ä—è–º–æ –≤ Telegram) ---
@dp.message(Command("dbinfo"))
async def cmd_dbinfo(message: types.Message):
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        row = await conn.fetchrow("""
            SELECT current_database() AS db,
                   current_user AS usr,
                   current_schema() AS sch,
                   current_setting('search_path') AS search_path,
                   current_setting('server_version') AS ver,
                   current_setting('TimeZone', true) AS tz;
        """)
        await conn.close()
        await message.answer(
            f"üóÑ DB={row['db']}\nüë§ user={row['usr']}\nüìö schema={row['sch']}\n"
            f"üîé search_path={row['search_path']}\nüêò pg={row['ver']}\nüåç tz={row['tz']}"
        )
    except Exception as e:
        await message.answer(f"‚ùå DB error: {e}")

@dp.message(Command("test_event"))
async def cmd_test_event(message: types.Message):
    try:
        r = await save_event_to_db(
            user_id=message.from_user.id,
            creator_name=message.from_user.full_name or "",
            creator_phone="",
            title="BOT TEST",
            description="insert from /test_event",
            date=datetime.utcnow(),
            location="N/A",
            capacity=1,
            needed_count=1,
            status="active"
        )
        await message.answer(f"‚úÖ events.id={r['id']} created_at={r['created_at']}")
    except Exception as e:
        await message.answer(f"‚ùå insert error: {e}")

# --- Handlers ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    state = user_states.setdefault(user_id, {})
    try:
        user = await get_user_from_db(user_id)
    except Exception as e:
        logging.error("DB connection error: %s", e)
        state['step'] = 'menu'
        await message.answer(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ –ë–î, —Ä–æ–±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–∞.",
            reply_markup=main_menu
        )
        return
    if user:
        state['step'] = 'menu'
        await message.answer(
            f"üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞–∑–∞–¥, {user['name']}! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=main_menu
        )
    else:
        state.clear()
        state.update({'step': 'name', 'phone': None})
        await message.answer(
            "üëã –í—ñ—Ç–∞—é! –î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ –ø—Ä–æ—Ñ—ñ–ª—å. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
            reply_markup=get_back_button()
        )
    return

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    state = user_states.setdefault(user_id, {})
    if state.get('step') != 'photo':
        return
    state['photo'] = message.photo[-1].file_id
    state['step'] = 'interests'
    await message.answer(
        "üéØ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):",
        reply_markup=get_back_button()
    )

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {'step': 'menu'}
    await message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é", reply_markup=main_menu)

@dp.message(F.text)
async def handle_steps(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    state = user_states.setdefault(user_id, {})
    step = state.get('step')
    logging.debug("handle_steps: step=%s, text=%s", step, text)

    # === –¢–†–ò–ì–ï–†–ò –ì–û–õ–û–í–ù–û–ì–û –ú–ï–ù–Æ ===
    if text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é":
        if step == 'name':
            return
        user = await get_user_from_db(user_id)
        if not user:
            await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        state.clear()
        state.update({
            'step': 'create_event_title',
            'creator_name': user.get('name') if user else '',
            'creator_phone': user.get('phone') if user else ''
        })
        await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:", reply_markup=get_back_button())
        return

    if text == "üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏" and step in (None, 'menu'):
        state['step'] = 'search_keyword_wait'
        await message.answer("üîé –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É:", reply_markup=get_back_button())
        return

    # === –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø ===
    if step == 'name':
        state['name'] = text
        state['step'] = 'city'
        await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=get_back_button())
        return

    if step == 'city':
        state['city'] = text
        state['step'] = 'photo'
        await message.answer("üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Å–≤—ñ—Ç–ª–∏–Ω—É:", reply_markup=get_back_button())
        return

    if step == 'interests':
        state['interests'] = [i.strip() for i in text.split(',')]
        try:
            await save_user_to_db(
                user_id=user_id,
                phone=state.get('phone',''),
                name=state.get('name',''),
                city=state.get('city',''),
                photo=state.get('photo',''),
                interests=', '.join(state['interests'])
            )
            await message.answer('‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', reply_markup=main_menu)
        except Exception as e:
            logging.error('Error saving profile: %s', e)
            await message.answer('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å.', reply_markup=main_menu)
        state['step'] = 'menu'
        return

    # === –ü–†–û–§–Ü–õ–¨ ===
    if step == 'menu' and text == 'üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å':
        logging.debug('Profile button pressed')
        user = await get_user_from_db(user_id)
        if user and user.get('photo'):
            await message.answer_photo(
                photo=user['photo'],
                caption=(
                    f"üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\nüìõ –Ü–º'—è: {user['name']}\n"
                    f"üèô –ú—ñ—Å—Ç–æ: {user['city']}\nüéØ –Ü–Ω—Ç–µ—Ä–µ—Å–∏: {user['interests']}"
                ),
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[
                        [types.KeyboardButton(text='‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å'), types.KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]
                    ],
                    resize_keyboard=True
                )
            )
        else:
            await message.answer('‚ùó –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=main_menu)
        return

    if step == 'menu' and text == '‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å':
        logging.debug('Edit profile triggered')
        user = await get_user_from_db(user_id)
        state.clear()
        state.update({'step': 'name', 'phone': user.get('phone','') if user else ''})
        await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:", reply_markup=get_back_button())
        return

    # === –°–¢–í–û–†–ï–ù–ù–Ø –ü–û–î–Ü–á ===
    if step == 'create_event_title':
        state['event_title'] = text
        state['step'] = 'create_event_description'
        await message.answer('üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–æ–¥—ñ—ó:', reply_markup=get_back_button())
        return

    if step == 'create_event_description':
        state['event_description'] = text
        state['step'] = 'create_event_date'
        await message.answer('üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å YYYY-MM-DD HH:MM', reply_markup=get_back_button())
        return

    if step == 'create_event_date':
        try:
            dt = datetime.strptime(text, '%Y-%m-%d %H:%M')
        except ValueError:
            await message.answer('‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!', reply_markup=get_back_button())
            return
        state['event_date'] = dt
        state['step'] = 'create_event_location'
        await message.answer('üìç –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ –ø–æ–¥—ñ—ó:', reply_markup=get_back_button())
        return

    if step == 'create_event_location':
        state['event_location'] = text
        state['step'] = 'create_event_capacity'
        await message.answer('üë• –°–∫—ñ–ª—å–∫–∏ –≤—Å—å–æ–≥–æ –º—ñ—Å—Ü—å?', reply_markup=get_back_button())
        return

    if step == 'create_event_capacity':
        try:
            cap = int(text)
            if cap <= 0:
                raise ValueError
        except ValueError:
            await message.answer('‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ.', reply_markup=get_back_button())
            return
        state['capacity'] = cap
        state['step'] = 'create_event_needed'
        await message.answer('üë§ –°–∫—ñ–ª—å–∫–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —à—É–∫–∞—î—Ç–µ?', reply_markup=get_back_button())
        return

    if step == 'create_event_needed':
        logging.debug('Entering create_event_needed with state %s', state)
        try:
            need = int(text)
            cap = state['capacity']
            if need <= 0 or need > cap:
                raise ValueError
        except ValueError:
            await message.answer(f"‚ùó –í—ñ–¥ 1 –¥–æ {state['capacity']}", reply_markup=get_back_button())
            return
        state['needed_count'] = need
        # preview event
        await message.answer(
            "üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—É –ø–æ–¥—ñ—é:\n\n"
            f"üìõ {state['event_title']}\n"
            f"‚úèÔ∏è {state['event_description']}\n"
            f"üìÖ {state['event_date'].strftime('%Y-%m-%d %H:%M')}\n"
            f"üìç {state['event_location']}\n"
            f"üë• –ú—ñ—Å—Ç–∫—ñ—Å—Ç—å: {state['capacity']}\n"
            f"üë§ –®—É–∫–∞—î–º–æ: {state['needed_count']}\n\n"
            "‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ | ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ | ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text='‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏'), types.KeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏')],
                    [types.KeyboardButton(text='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')],
                    [types.KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]
                ], resize_keyboard=True
            )
        )
        state['step'] = 'publish_confirm'
        return

    if step == 'publish_confirm':
        logging.debug("PUBLISH_CONFIRM: state=%s, text=%r", state, text)

        if text == '‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏':
            try:
                # –ü–†–Ø–ú–ê –≤—Å—Ç–∞–≤–∫–∞ –ø–æ–¥—ñ—ó –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'active'
                await save_event_to_db(
                    user_id=user_id,
                    creator_name=state.get('creator_name', ''),
                    creator_phone=state.get('creator_phone', '') or '',
                    title=state['event_title'],
                    description=state['event_description'],
                    date=state['event_date'],
                    location=state['event_location'],
                    capacity=state['capacity'],
                    needed_count=state['needed_count'],
                    status='active'
                )
                logging.info("Event published (inserted): %s by user %s", state['event_title'], user_id)
                await message.answer(
                    "üöÄ –í–∞—à–∞ –ø–æ–¥—ñ—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—à—É–∫–∞—á–∞–º!",
                    reply_markup=main_menu
                )
            except Exception as e:
                logging.error("Publish failed: %s", e)
                await message.answer(
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ–¥—ñ—ó: {e}",
                    reply_markup=main_menu
                )
            state['step'] = 'menu'
            return

        elif text == '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏':
            state['step'] = 'create_event_title'
            await message.answer(
                "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:",
                reply_markup=get_back_button()
            )
            return

        elif text == '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏':
            # –Ø–∫—â–æ –±—É–≤ —á–µ—Ä–Ω–µ—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Å ‚Äî –º–æ–∂–Ω–∞ –æ–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å–æ–º cancelled.
            try:
                await cancel_event(user_id, state.get('event_title', ''))
            except Exception as e:
                logging.error("Cancel failed: %s", e)
            await message.answer(
                "‚ùå –í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó.",
                reply_markup=main_menu
            )
            state['step'] = 'menu'
            return

    # === –ü–û–®–£–ö –ü–û–î–Ü–ô (–ø—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º) ===
    if step == 'search_keyword_wait':
        kw = text
        try:
            conn = await asyncpg.connect(DATABASE_URL)
            rows = await conn.fetch(
                """
                SELECT id, title, description, date, location, capacity, needed_count, status
                FROM events
                WHERE status = 'active'
                  AND (title ILIKE $1 OR description ILIKE $1)
                ORDER BY date ASC NULLS LAST, id DESC
                LIMIT 5
                """,
                f"%{kw}%"
            )
            await conn.close()
        except Exception as e:
            logging.error("Search error: %s", e)
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É.", reply_markup=main_menu)
            state['step'] = 'menu'
            return

        if not rows:
            await message.answer("üòï –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ —Å–ª–æ–≤–æ.", reply_markup=main_menu)
            state['step'] = 'menu'
            return

        out = ["üîé –ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–¥—ñ—ó:"]
        for r in rows:
            dt = r["date"].strftime('%Y-%m-%d %H:%M') if r["date"] else "‚Äî"
            out.append(
                f"\n‚Ä¢ <b>{r['title']}</b> (#{r['id']})\n"
                f"  üìÖ {dt} | üìç {r['location']}\n"
                f"  üë• {r['needed_count']}/{r['capacity']} —à—É–∫–∞—î–º–æ\n"
                f"  üü¢ {r['status']}\n"
                f"  ‚úèÔ∏è {r['description'][:120]}{'‚Ä¶' if r['description'] and len(r['description'])>120 else ''}"
            )
        await message.answer("\n".join(out), parse_mode="HTML", reply_markup=main_menu)
        state['step'] = 'menu'
        return

    # === –ó–ê–ì–õ–£–®–ö–ê ===
    logging.info('Unhandled step=%s text=%s', step, text)

# Entrypoint
async def main():
    logging.info('Starting polling')
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())







   


