import logging
import asyncio
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart

# --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø --- #
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –§–ê–ô–õ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø --- #
USER_DATA_FILE = "users.json"

if os.path.exists(USER_DATA_FILE):
    with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
else:
    users = {}

def save_users(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

user_states = {}

# --- –ö–ù–û–ü–ö–ò --- #
main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
    ], resize_keyboard=True
)

back_button = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

find_event_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üîç –ü–æ–¥—ñ—ó –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏")],
        [types.KeyboardButton(text="üìç –ü–æ–¥—ñ—ó –±—ñ–ª—è –º–µ–Ω–µ")],
        [types.KeyboardButton(text="üèô –ü–æ–¥—ñ—ó —É –º—ñ—Å—Ç—ñ")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ], resize_keyboard=True
)

# --- START --- #
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in users:
        await message.answer(
            f"üëã –í—ñ—Ç–∞—é, {users[user_id].get('name')}! –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
            reply_markup=main_menu
        )
        user_states[user_id] = {"step": "menu"}
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤—ñ—Ç, —Ç–∏ –ø–æ—Ç—Ä–∞–ø–∏–≤ —É Findsy! –¢—É—Ç –∑ –ª–µ–≥–∫—ñ—Å—Ç—é –∑–Ω–∞–π–¥–µ—à –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ –≤–µ—á—ñ—Ä –∞–±–æ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤ –¥–æ —Å–≤–æ—î—ó –∫–æ–º–ø–∞–Ω—ñ—ó!\n\n–®—É–∫–∞–π, —Å—Ç–≤–æ—Ä—é–π, –∑–∞–ø—Ä–æ—à—É–π, –≤–∑–∞—î–º–æ–¥—ñ–π —Ç–∞ —Å–ø—ñ–ª–∫—É–π—Å—è! üíõ",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="üìû –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å")]],
                resize_keyboard=True
            )
        )
        user_states[user_id] = {"step": "authorization"}

@dp.message(F.text == "üìû –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å")
async def authorize_step(message: types.Message):
    user_id = str(message.from_user.id)
    user_states[user_id]["step"] = "phone"
    await message.answer(
        "üì≤ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)], [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )

@dp.message(F.contact)
async def get_phone(message: types.Message):
    user_id = str(message.from_user.id)
    user_states[user_id]["phone"] = message.contact.phone_number
    user_states[user_id]["step"] = "name"
    await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=back_button)

@dp.message(F.text & ~F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]))
async def handle_steps(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")

    # --- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
    if step == "name":
        user_states[user_id]["name"] = message.text
        user_states[user_id]["step"] = "city"
        await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=back_button)

    elif step == "city":
        user_states[user_id]["city"] = message.text
        user_states[user_id]["step"] = "photo"
        await message.answer("üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Å–≤—ñ—Ç–ª–∏–Ω—É:", reply_markup=back_button)

    elif step == "interests":
        user_states[user_id]["interests"] = message.text.split(",")
        users[user_id] = {
            "phone": user_states[user_id].get("phone"),
            "name": user_states[user_id].get("name"),
            "city": user_states[user_id].get("city"),
            "photo": user_states[user_id].get("photo"),
            "interests": user_states[user_id].get("interests")
        }
        save_users(users)
        user_states[user_id]["step"] = "menu"
        await message.answer("‚úÖ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=main_menu)

    # --- –ú–µ–Ω—é –ø—Ä–æ—Ñ—ñ–ª—é ---
    elif step == "menu":
        if message.text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
            profile = users.get(user_id, {})
            if profile.get("photo"):
                await message.answer_photo(
                    photo=profile["photo"],
                    caption=f"üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n\nüìõ –Ü–º'—è: {profile.get('name')}\nüèô –ú—ñ—Å—Ç–æ: {profile.get('city')}\nüéØ –Ü–Ω—Ç–µ—Ä–µ—Å–∏: {', '.join(profile.get('interests', []))}",
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=[[types.KeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")], [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                        resize_keyboard=True
                    )
                )
            else:
                await message.answer("‚ùóÔ∏è–§–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu)

        elif message.text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å":
            phone = users[user_id].get("phone")
            user_states[user_id] = {"step": "name", "phone": phone}
            await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:", reply_markup=back_button)

        elif message.text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é":
            user_states[user_id]["step"] = "create_event_title"
            await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:", reply_markup=back_button)

        elif message.text == "üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é":
            user_states[user_id]["step"] = "find_event_menu"
            await message.answer(
                    "üîé –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–æ—à—É–∫—É –ø–æ–¥—ñ—ó:",
                    reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[
                        [types.KeyboardButton(text="üîç –ü–æ–¥—ñ—ó –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏")],
                        [types.KeyboardButton(text="üìç –ü–æ–¥—ñ—ó –±—ñ–ª—è –º–µ–Ω–µ")],
                        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )

    # --- –õ–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó ---
    elif step == "create_event_title":
        event_title = message.text.strip()
        user_states[user_id]["event_title"] = event_title
        user_states[user_id]["step"] = "create_event_description"
        await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–æ–¥—ñ—ó:", reply_markup=back_button)

    elif step == "create_event_description":
        event_description = message.text.strip()
        user_states[user_id]["event_description"] = event_description
        user_states[user_id]["step"] = "create_event_date"
        await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25.05.2025 18:00):", reply_markup=back_button)

    elif step == "create_event_date":
        event_date = message.text.strip()
        user_states[user_id]["event_date"] = event_date
        user_states[user_id]["step"] = "create_event_location"
        await message.answer("üìç –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø–æ–¥—ñ—ó (–∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–∞–∑–≤—É –ª–æ–∫–∞—Ü—ñ—ó):", reply_markup=back_button)

    elif step == "create_event_location":
        event_location = message.text.strip()
        user_states[user_id]["event_location"] = event_location
        user_states[user_id]["step"] = "create_event_total"
        await message.answer("üë• –°–∫—ñ–ª—å–∫–∏ –≤—Å—å–æ–≥–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–ª–∞–Ω—É—î—Ç—å—Å—è?", reply_markup=back_button)

    elif step == "create_event_total":
        try:
            event_total = int(message.text.strip())
            user_states[user_id]["event_total"] = event_total
            user_states[user_id]["step"] = "create_event_missing"
            await message.answer("üë• –°–∫—ñ–ª—å–∫–∏ —â–µ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î?", reply_markup=back_button)
        except ValueError:
            await message.answer("‚ùó –ß–∏—Å–ª–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    elif step == "create_event_missing":
        try:
            event_missing = int(message.text.strip())
            user_states[user_id]["event_missing"] = event_missing
            user_states[user_id]["step"] = "confirmation"
            await message.answer(
                f"‚úÖ –ü–æ–¥—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n\n"
                f"üìõ –ù–∞–∑–≤–∞: {user_states[user_id]['event_title']}\n"
                f"‚úèÔ∏è –û–ø–∏—Å: {user_states[user_id]['event_description']}\n"
                f"üìÖ –î–∞—Ç–∞: {user_states[user_id]['event_date']}\n"
                f"üìç –õ–æ–∫–∞—Ü—ñ—è: {user_states[user_id]['event_location']}\n"
                f"üë• –£—á–∞—Å–Ω–∏–∫—ñ–≤: {user_states[user_id]['event_total']}\n"
                f"üö∂ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –∑–Ω–∞–π—Ç–∏: {user_states[user_id]['event_missing']}\n\n"
                "‚úÖ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", 
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="‚úÖ –¢–∞–∫")], [types.KeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏")]], 
                    resize_keyboard=True
                )
            )
        except ValueError:
            await message.answer("‚ùó –ß–∏—Å–ª–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    elif step == "confirmation":
        if message.text == "‚úÖ –¢–∞–∫":
            await message.answer("üéâ –ü–æ–¥—ñ—é —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!", reply_markup=main_menu)
        elif message.text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏":
            user_states[user_id]["step"] = "create_event_title"
            await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó –∑–∞–Ω–æ–≤–æ:", reply_markup=back_button)

    elif message.text == "üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é":
            user_states[user_id]["step"] = "find_event_menu"
            await message.answer(
                "üîé –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–æ—à—É–∫—É –ø–æ–¥—ñ—ó:",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[
                        [types.KeyboardButton(text="üîç –ü–æ–¥—ñ—ó –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏")],
                        [types.KeyboardButton(text="üìç –ü–æ–¥—ñ—ó –±—ñ–ª—è –º–µ–Ω–µ")],
                        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )

    # --- –ü–æ—à—É–∫ –ø–æ–¥—ñ–π –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ ---
    elif step == "find_event_menu":
        if message.text == "üîç –ü–æ–¥—ñ—ó –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏":
            user = users.get(user_id)
            if user:
                user_interests = [interest.strip().lower() for interest in user.get("interests", [])]
                matching_events = [
                    event for event in events.values()
                    if any(interest in event["title"].lower() or interest in event["description"].lower() for interest in user_interests)
                ]
                if matching_events:
                    response = "–ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–¥—ñ—ó –∑–∞ –≤–∞—à–∏–º–∏ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏:\n"
                    for event in matching_events:
                        response += (
                            f"–ù–∞–∑–≤–∞: {event['title']}\n"
                            f"–û–ø–∏—Å: {event['description']}\n"
                            f"–î–∞—Ç–∞: {event['date']}\n"
                            f"–õ–æ–∫–∞—Ü—ñ—è: {event['location']}\n"
                            f"–£—á–∞—Å–Ω–∏–∫—ñ–≤: {len(event['participants'])}/{event['total']}\n"
                            f"–î–æ–ª—É—á–∏—Ç–∏—Å—è: /join_{event['id']}\n\n"
                        )
                    await message.answer(response)
                else:
                    await message.answer("–ü–æ–¥—ñ—ó –∑–∞ –≤–∞—à–∏–º–∏ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            else:
                await message.answer("–°–ø–µ—Ä—à—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å –∑ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏.")

    # --- –ü–æ—à—É–∫ –ø–æ–¥—ñ–π –ø–æ–±–ª–∏–∑—É ---
    elif step == "get_location" and message.location:
        user_states[user_id]["location"] = (message.location.latitude, message.location.longitude)
        user_states[user_id]["step"] = "get_radius"
        await message.answer("üìè –í–≤–µ–¥—ñ—Ç—å —Ä–∞–¥—ñ—É—Å –ø–æ—à—É–∫—É (—É –∫—ñ–ª–æ–º–µ—Ç—Ä–∞—Ö):")

    elif step == "get_radius":
        try:
            radius = float(message.text.strip())
            user_location = user_states[user_id]["location"]
            matching_events = [
                event for event in events.values()
                if geodesic((event["location"]["latitude"], event["location"]["longitude"]), user_location).km <= radius
            ]
            if matching_events:
                response = "–ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–¥—ñ—ó –ø–æ–±–ª–∏–∑—É:\n"
                for event in matching_events:
                    response += (
                        f"–ù–∞–∑–≤–∞: {event['title']}\n"
                        f"–û–ø–∏—Å: {event['description']}\n"
                        f"–î–∞—Ç–∞: {event['date']}\n"
                        f"–õ–æ–∫–∞—Ü—ñ—è: {event['location']}\n"
                        f"–£—á–∞—Å–Ω–∏–∫—ñ–≤: {len(event['participants'])}/{event['total']}\n"
                        f"–î–æ–ª—É—á–∏—Ç–∏—Å—è: /join_{event['id']}\n\n"
                    )
                await message.answer(response)
            else:
                await message.answer("–ü–æ–¥—ñ—ó –ø–æ–±–ª–∏–∑—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä–∞–¥—ñ—É—Å —É –∫—ñ–ª–æ–º–µ—Ç—Ä–∞—Ö.")


@dp.message(F.photo)
async def get_photo(message: types.Message):
    user_id = str(message.from_user.id)
    if user_states.get(user_id, {}).get("step") == "photo":
        user_states[user_id]["photo"] = message.photo[-1].file_id
        user_states[user_id]["step"] = "interests"
        await message.answer("üéØ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É:", reply_markup=back_button)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")
    if step == "name":
        await authorize_step(message)
    elif step == "city":
        user_states[user_id]["step"] = "name"
        await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=back_button)
    elif step == "photo":
        user_states[user_id]["step"] = "city"
        await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=back_button)
    elif step == "interests":
        user_states[user_id]["step"] = "photo"
        await message.answer("üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Å–≤—ñ—Ç–ª–∏–Ω—É:", reply_markup=back_button)
    else:
        await message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu)
        user_states[user_id]["step"] = "menu"

# --- –ó–ê–ü–£–°–ö --- #
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


   


# --- –û–ë–†–û–ë–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –ü–û–î–Ü–á --- #
@dp.message(F.text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")
async def start_event_creation(message: types.Message):
    user_id = str(message.from_user.id)
    user_states[user_id] = {"step": "create_event_title"}
    await message.answer(
        "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:"
        
        "üîç *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:* –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ç–∞ —á—ñ—Ç–∫—É –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó. "
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —à—É–∫–∞—Ç–∏–º—É—Ç—å —ó—ó —Å–∞–º–µ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.",
        reply_markup=back_button
    )

@dp.message(F.text & ~F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]))
async def create_event_steps(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")

    if step == "create_event_title":
        event_title = message.text.strip()
        if len(event_title) < 3:
            await message.answer("‚ùó –ù–∞–∑–≤–∞ –Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        user_states[user_id]["event_title"] = event_title
        user_states[user_id]["step"] = "create_event_description"
        await message.answer(
            "üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–æ–¥—ñ—ó:"
            
            "‚úèÔ∏è *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:* –û–ø–∏—Å –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–º —ñ —á—ñ—Ç–∫–∏–º, —â–æ–± –∑–∞—Ü—ñ–∫–∞–≤–∏—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤.",
            reply_markup=back_button
        )

    elif step == "create_event_description":
        event_description = message.text.strip()
        user_states[user_id]["event_description"] = event_description
        user_states[user_id]["step"] = "create_event_date"
        await message.answer(
            "üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø–æ–¥—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25.05.2025 18:00):",
            reply_markup=back_button
        )

    elif step == "create_event_date":
        event_date = message.text.strip()
        user_states[user_id]["event_date"] = event_date
        user_states[user_id]["step"] = "create_event_location"
        await message.answer(
            "üìç –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø–æ–¥—ñ—ó (–∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–∞–∑–≤—É –ª–æ–∫–∞—Ü—ñ—ó):",
            reply_markup=back_button
        )

    elif step == "create_event_location":
        event_location = message.text.strip()
        user_states[user_id]["event_location"] = event_location
        user_states[user_id]["step"] = "create_event_limit"
        await message.answer(
            "üë• –í–∫–∞–∂—ñ—Ç—å –ª—ñ–º—ñ—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤ (—á–∏—Å–ª–æ):",
            reply_markup=back_button
        )

    elif step == "create_event_limit":
        try:
            event_limit = int(message.text.strip())
            user_states[user_id]["event_limit"] = event_limit

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ—ó
            event = {
                "title": user_states[user_id].get("event_title"),
                "description": user_states[user_id].get("event_description"),
                "date": user_states[user_id].get("event_date"),
                "location": user_states[user_id].get("event_location"),
                "limit": user_states[user_id].get("event_limit"),
                "organizer": users[user_id].get("name")
            }
            save_users(event)
            user_states[user_id]["step"] = "menu"

            await message.answer(
                f"‚úÖ –ü–æ–¥—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ!"
                f"üìõ –ù–∞–∑–≤–∞: {event['title']}"
                f"‚úèÔ∏è –û–ø–∏—Å: {event['description']}"
                f"üìÖ –î–∞—Ç–∞: {event['date']}"
                f"üìç –õ–æ–∫–∞—Ü—ñ—è: {event['location']}"
                f"üë• –õ—ñ–º—ñ—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤: {event['limit']}"
                f"üë§ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä: {event['organizer']}",
                reply_markup=main_menu
            )
        except ValueError:
            await message.answer("‚ùó –õ—ñ–º—ñ—Ç —É—á–∞—Å–Ω–∏–∫—ñ–≤ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")





   
