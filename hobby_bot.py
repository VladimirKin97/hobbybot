```python
import os
import logging
import asyncio
from datetime import datetime

import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart

# --- Initialization ---
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# In-memory user state storage
user_states: dict[int, dict] = {}

# --- Keyboards ---
def get_back_button() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
        [types.KeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏")]
    ],
    resize_keyboard=True
)

# --- Database helpers ---
async def get_user_from_db(user_id: int) -> asyncpg.Record | None:
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        return await conn.fetchrow(
            "SELECT * FROM users WHERE telegram_id = $1",
            str(user_id)
        )
    finally:
        await conn.close()

async def save_user_to_db(
    user_id: int, phone: str, name: str, city: str, photo: str, interests: str
):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        await conn.execute(
            "INSERT INTO users (telegram_id, phone, name, city, photo, interests) VALUES ($1,$2,$3,$4,$5,$6)",
            str(user_id), phone, name, city, photo, interests
        )
    finally:
        await conn.close()

async def save_event_to_db(
    user_id: int,
    creator_name: str,
    creator_phone: str,
    title: str,
    description: str,
    date: datetime,
    location: str,
    capacity: int,
    needed_count: int,
    status: str
):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        await conn.execute(
            """
            INSERT INTO events (
                user_id, creator_name, creator_phone, title,
                description, date, location, capacity, needed_count, status
            ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
            """,
            user_id, creator_name, creator_phone, title,
            description, date, location, capacity, needed_count, status
        )
    finally:
        await conn.close()

async def publish_event(user_id: int, title: str):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        await conn.execute(
            "UPDATE events SET status='published' WHERE user_id=$1 AND title=$2",
            user_id, title
        )
    finally:
        await conn.close()

async def cancel_event(user_id: int, title: str):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        await conn.execute(
            "UPDATE events SET status='cancelled' WHERE user_id=$1 AND title=$2",
            user_id, title
        )
    finally:
        await conn.close()

# --- Handlers ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states.setdefault(user_id, {})
    user = await get_user_from_db(user_id)
    if not user:
        user_states[user_id] = {"step": "name", "phone": None}
        await message.answer(
            "üëã –í—ñ—Ç–∞—é! –î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ –ø—Ä–æ—Ñ—ñ–ª—å. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
            reply_markup=get_back_button()
        )
    else:
        user_states[user_id]["step"] = "menu"
        await message.answer(
            "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞–∑–∞–¥! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=main_menu
        )
    return

@dp.message(F.text & ~F.text.in_(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']))
async def handle_steps(message: types.Message):
    user_id = message.from_user.id
    text    = message.text.strip()
    state   = user_states.setdefault(user_id, {})
    step    = state.get('step')
    print(f"=== handle_steps: step={step!r}, text={text!r}")

    # Global Create Event trigger
    if text == '‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é':
        user = await get_user_from_db(user_id)
        if not user:
            await message.answer('‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start')
            return
        state.clear()
        state.update({
            'step': 'create_event_title',
            'creator_name': user['name'],
            'creator_phone': user['phone']
        })
        await message.answer('üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:', reply_markup=get_back_button())
        return

    # 1) Registration
    if step == 'name':
        state['name'] = text
        state['step'] = 'city'
        await message.answer('üèô –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:', reply_markup=get_back_button())
        return
    elif step == 'city':
        state['city'] = text
        state['step'] = 'photo'
        await message.answer('üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Å–≤—ñ—Ç–ª–∏–Ω—É:', reply_markup=get_back_button())
        return
    elif step == 'photo':
        if message.photo:
            state['photo'] = message.photo[-1].file_id
        state['step'] = 'interests'
        await message.answer('üéØ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):', reply_markup=get_back_button())
        return
    elif step == 'interests':
        state['interests'] = [i.strip() for i in text.split(',')]
        await save_user_to_db(
            user_id=user_id,
            phone=state.get('phone'),
            name=state.get('name'),
            city=state.get('city'),
            photo=state.get('photo',''),
            interests=', '.join(state['interests'])
        )
        state['step'] = 'menu'
        await message.answer('‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ!', reply_markup=main_menu)
        return

    # 2) Main menu
    if step == 'menu':
        if text == 'üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å':
            user = await get_user_from_db(user_id)
            if user and user.get('photo'):
                await message.answer_photo(
                    photo=user['photo'],
                    caption=(
                        f"üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\nüìõ –Ü–º'—è: {user['name']}\n"
                        f"üèô –ú—ñ—Å—Ç–æ: {user['city']}\nüéØ –Ü–Ω—Ç–µ—Ä–µ—Å–∏: {user['interests']}"
                    ),
                    reply_markup=types.ReplyKeyboardMarkup(
                        [[types.KeyboardButton('‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å')], [types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]],
                        resize_keyboard=True
                    )
                )
            else:
                await message.answer('‚ùó –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', reply_markup=main_menu)
            return
        elif text == '‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å':
            usr = await get_user_from_db(user_id)
            state.clear()
            state['step'] = 'name'
            state['phone'] = usr['phone'] if usr else None
            await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:", reply_markup=get_back_button())
            return

    # 3) Create event flow
    if step == 'create_event_title':
        state['event_title'] = text
        state['step'] = 'create_event_description'
        await message.answer('üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–æ–¥—ñ—ó:', reply_markup=get_back_button())
        return
    elif step == 'create_event_description':
        state['event_description'] = text
        state['step'] = 'create_event_date'
        await message.answer(
            'üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å YYYY-MM-DD HH:MM', reply_markup=get_back_button()
        )
        return
    elif step == 'create_event_date':
        try:
            dt = datetime.strptime(text, '%Y-%m-%d %H:%M')
        except ValueError:
            await message.answer('‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!', reply_markup=get_back_button())
            return
        state['event_date'] = dt
        state['step'] = 'create_event_location'
        await message.answer('üìç –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ:', reply_markup=get_back_button())
        return
    elif step == 'create_event_location':
        state['event_location'] = text
        state['step'] = 'create_event_capacity'
        await message.answer('üë• –°–∫—ñ–ª—å–∫–∏ –≤—Å—å–æ–≥–æ –º—ñ—Å—Ü—å?', reply_markup=get_back_button())
        return
    elif step == 'create_event_capacity':
        try:
            cap = int(text)
            if cap <= 0:
                raise ValueError
        except ValueError:
            await message.answer('‚ùó –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ.', reply_markup=get_back_button())
            return
        state['capacity'] = cap
        state['step'] = 'create_event_needed'
        await message.answer('üë§ –°–∫—ñ–ª—å–∫–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —à—É–∫–∞—î—Ç–µ?', reply_markup=get_back_button())
        return
    elif step == 'create_event_needed':
        try:
            need = int(text)
            cap = state['capacity']
            if need <= 0 or need > cap:
                raise ValueError
        except ValueError:
            await message.answer(f"‚ùó –í—ñ–¥ 1 –¥–æ {state['capacity']}", reply_markup=get_back_button())
            return
        state['needed_count'] = need
        try:
            await save_event_to_db(
                user_id=user_id,
                creator_name=state['creator_name'],
                creator_phone=state['creator_phone'],
                title=state['event_title'],
                description=state['event_description'],
                date=state['event_date'],
                location=state['event_location'],
                capacity=state['capacity'],
                needed_count=state['needed_count'],
                status='draft'
            )
        except Exception as e:
            logging.error('Save event failed: %s', e)
            await message.answer('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏.', reply_markup=main_menu)
            state['step'] = 'menu'
            return
        state['step'] = 'publish_confirm'
        await message.answer(
            'üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é',
            reply_markup=types.ReplyKeyboardMarkup(
                [[types.KeyboardButton('‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏')], [types.KeyboardButton('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')], [types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]],
                resize_keyboard=True
            )
        )
        return

    # 4) Publish/Cancel
    if step == 'publish_confirm':
        if text == '‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏':
            await publish_event(user_id, state['event_title'])
            state['step'] = 'menu'
            await message.answer('üöÄ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!', reply_markup=main_menu)
        elif text == '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏':
            await cancel_event(user_id, state['event_title'])
            state['step'] = 'menu'
            await message.answer('‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.', reply_markup=main_menu)
        return

    # 5) Search events
    if step == 'find_event_menu' and text == 'üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏':
        user = await get_user_from_db(user_id)
        # implement search logic
        return

    # Fallback
    logging.info('Unhandled step %s text %s', step, text)

# --- Entrypoint ---
async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())
```



   
