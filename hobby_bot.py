import os
import logging
import asyncio
from datetime import datetime, timedelta, timezone

import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# --- Init ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
if not BOT_TOKEN or not DATABASE_URL:
    raise RuntimeError("Environment variables BOT_TOKEN and DATABASE_URL must be set")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# In-memory FSM (–ø—Ä–æ—Å—Ç–∏–π —Å–ª–æ–≤–Ω–∏–∫)
user_states: dict[int, dict] = {}

# --- Keyboards ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
        [KeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")],
        [KeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é")]
    ],
    resize_keyboard=True
)

def get_back_button() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)

def location_choice_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)],
            [KeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º"), KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def radius_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="3"), KeyboardButton(text="5")],
            [KeyboardButton(text="10"), KeyboardButton(text="20")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def search_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîé –ó–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º")],
            [KeyboardButton(text="üìç –ü–æ—Ä—É—á –∑—ñ –º–Ω–æ—é")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def event_publish_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏'), KeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏')],
            [KeyboardButton(text='‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')],
            [KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    )

def event_join_kb(event_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üôã –î–æ–ª—É—á–∏—Ç–∏—Å—è", callback_data=f"join:{event_id}")]])

def approve_kb(req_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve:{req_id}"),
        InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",   callback_data=f"reject:{req_id}")
    ]])

# --- DB helpers ---
async def get_user_from_db(user_id: int) -> asyncpg.Record | None:
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        return await conn.fetchrow("SELECT * FROM users WHERE telegram_id::text = $1", str(user_id))
    finally:
        await conn.close()

async def save_user_to_db(user_id: int, phone: str, name: str, city: str, photo: str, interests: str):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        await conn.execute("""
            INSERT INTO users (telegram_id, phone, name, city, photo, interests)
            VALUES ($1,$2,$3,$4,$5,$6)
            ON CONFLICT (telegram_id) DO UPDATE SET
              phone=EXCLUDED.phone, name=EXCLUDED.name, city=EXCLUDED.city,
              photo=EXCLUDED.photo, interests=EXCLUDED.interests
        """, user_id, phone, name, city, photo, interests)
    finally:
        await conn.close()

async def save_event_to_db(
    user_id: int, creator_name: str, creator_phone: str,
    title: str, description: str, date: datetime, location: str,
    capacity: int, needed_count: int, status: str,
    location_lat: float | None = None, location_lon: float | None = None,
    photo: str | None = None
):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        row = await conn.fetchrow("""
            INSERT INTO events (
                user_id, creator_name, creator_phone, title,
                description, date, location, capacity, needed_count, status,
                location_lat, location_lon, photo
            ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
            RETURNING id, created_at
        """, user_id, creator_name or '', creator_phone or '', title, description, date, location,
           capacity, needed_count, status, location_lat, location_lon, photo)
        return row
    finally:
        await conn.close()

async def find_events_by_kw(keyword: str, limit: int = 10):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        rows = await conn.fetch("""
            SELECT e.*,
                   u.name AS organizer_name,
                   u.interests AS organizer_interests,
                   u.photo AS organizer_photo,
                   (SELECT COUNT(*) FROM events ev2 WHERE ev2.user_id = e.user_id) AS org_count
            FROM events e
            LEFT JOIN users u ON u.telegram_id::text = e.user_id::text
            WHERE e.status='active' AND (e.title ILIKE $1 OR e.description ILIKE $1)
            ORDER BY e.date ASC NULLS LAST, e.id DESC
            LIMIT $2
        """, f"%{keyword}%", limit)
        return rows
    finally:
        await conn.close()

async def find_events_near(lat: float, lon: float, radius_km: float, limit: int = 10):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        rows = await conn.fetch("""
            WITH params AS (SELECT $1::float AS lat, $2::float AS lon, $3::float AS r)
            SELECT e.*,
                   u.name AS organizer_name,
                   u.interests AS organizer_interests,
                   u.photo AS organizer_photo,
                   (SELECT COUNT(*) FROM events ev2 WHERE ev2.user_id = e.user_id) AS org_count,
                   (6371 * acos(
                       cos(radians(p.lat)) * cos(radians(e.location_lat)) *
                       cos(radians(e.location_lon) - radians(p.lon)) +
                       sin(radians(p.lat)) * sin(radians(e.location_lat))
                   )) AS dist_km
            FROM events e
            JOIN params p ON true
            LEFT JOIN users u ON u.telegram_id::text = e.user_id::text
            WHERE e.status='active'
              AND e.location_lat IS NOT NULL AND e.location_lon IS NOT NULL
              AND (6371 * acos(
                       cos(radians(p.lat)) * cos(radians(e.location_lat)) *
                       cos(radians(e.location_lon) - radians(p.lon)) +
                       sin(radians(p.lat)) * sin(radians(e.location_lat))
                  )) <= p.r
            ORDER BY dist_km ASC
            LIMIT $4
        """, lat, lon, radius_km, limit)
        return rows
    finally:
        await conn.close()

async def get_active_conversation_for_user(uid: int) -> asyncpg.Record | None:
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        return await conn.fetchrow("""
            SELECT * FROM conversations
            WHERE status='active' AND expires_at > now()
              AND (organizer_id=$1 OR seeker_id=$1)
            ORDER BY created_at DESC LIMIT 1
        """, uid)
    finally:
        await conn.close()

async def close_conversation(conv_id: int, reason: str):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        await conn.execute("UPDATE conversations SET status=$2 WHERE id=$1", conv_id, 'expired' if reason=='expired' else 'closed')
    finally:
        await conn.close()

# --- Debug / Start ---
@dp.message(Command("dbinfo"))
async def cmd_dbinfo(message: types.Message):
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        row = await conn.fetchrow("""
            SELECT current_database() AS db, current_user AS usr, current_schema() AS sch,
                   current_setting('search_path') AS search_path,
                   current_setting('server_version') AS ver,
                   current_setting('TimeZone', true) AS tz;
        """)
        await conn.close()
        await message.answer(
            f"üóÑ DB={row['db']}\nüë§ user={row['usr']}\nüìö schema={row['sch']}\n"
            f"üîé search_path={row['search_path']}\nüêò pg={row['ver']}\nüåç tz={row['tz']}"
        )
    except Exception as e:
        await message.answer(f"‚ùå DB error: {e}")

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    uid = message.from_user.id
    st = user_states.setdefault(uid, {})
    try:
        user = await get_user_from_db(uid)
    except Exception:
        st['step'] = 'menu'
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ –ë–î, —Ä–æ–±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–∞.", reply_markup=main_menu)
        return
    if user:
        st['step'] = 'menu'
        await message.answer(f"üëã –í—ñ—Ç–∞—é, {user['name']}! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu)
    else:
        st.clear(); st.update({'step': 'name', 'phone': None})
        await message.answer("üëã –í—ñ—Ç–∞—é! –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:\n<i>–Ü–º‚Äô—è –±—É–¥–µ –≤–∏–¥–Ω–æ –≤ –∑–∞—è–≤–∫–∞—Ö.</i>",
                             reply_markup=get_back_button(), parse_mode="HTML")

# --- Photo handlers (profile/event) ---
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    uid = message.from_user.id
    st = user_states.setdefault(uid, {})
    step = st.get('step')

    if step == 'photo':
        st['photo'] = message.photo[-1].file_id
        st['step'] = 'interests'
        await message.answer("üéØ –Ü–Ω—Ç–µ—Ä–µ—Å–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):\n<i>–ù–∞ —ó—Ö –æ—Å–Ω–æ–≤—ñ –ø—ñ–¥–±–∏—Ä–∞—Ç–∏–º–µ–º–æ –ø–æ–¥—ñ—ó.</i>",
                             reply_markup=get_back_button(), parse_mode="HTML")
        return

    if step == 'create_event_photo':
        st['event_photo'] = message.photo[-1].file_id
        await message.answer("üì∏ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏¬ª –∞–±–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ.",
                             reply_markup=event_publish_kb())
        return

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    user_states[message.from_user.id] = {'step': 'menu'}
    await message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –º–µ–Ω—é", reply_markup=main_menu)

# --- Main FSM ---
@dp.message(F.text)
async def handle_steps(message: types.Message):
    uid = message.from_user.id
    text = message.text.strip()
    st = user_states.setdefault(uid, {})
    step = st.get('step')

    # –ú–µ–Ω—é
    if text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å" and step in (None, 'menu'):
        user = await get_user_from_db(uid)
        if user and user.get('photo'):
            await message.answer_photo(
                photo=user['photo'],
                caption=f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å:\nüìõ {user['name']}\nüèô {user['city']}\nüéØ {user['interests']}",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text='‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å'), KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]],
                    resize_keyboard=True
                )
            )
        else:
            await message.answer("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –±–µ–∑ —Ñ–æ—Ç–æ.", reply_markup=main_menu)
        return

    if text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å" and step == 'menu':
        user = await get_user_from_db(uid)
        st.clear(); st.update({'step': 'name', 'phone': user.get('phone','') if user else ''})
        await message.answer("‚úçÔ∏è –ù–æ–≤–µ —ñ–º'—è:\n<i>–¶–µ —ñ–º‚Äô—è –±–∞—á–∏—Ç–∏–º—É—Ç—å –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∏.</i>",
                             reply_markup=get_back_button(), parse_mode="HTML")
        return

    if text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é":
        if step == 'name': return
        user = await get_user_from_db(uid)
        if not user:
            await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start"); return
        st.clear()
        st.update({'step': 'create_event_title', 'creator_name': user.get('name',''), 'creator_phone': user.get('phone','')})
        await message.answer("üìù –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó:\n<i>–®—É–∫–∞—é—Ç—å –∑–∞ –Ω–∞–∑–≤–æ—é ‚Äî –ø–∏—à—ñ—Ç—å —á—ñ—Ç–∫–æ –π –±–µ–∑ –ø–æ–º–∏–ª–æ–∫.</i>",
                             reply_markup=get_back_button(), parse_mode="HTML")
        return

    if text == "üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é" and step in (None, 'menu'):
        st['step'] = 'search_menu'
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É:", reply_markup=search_menu_kb()); return

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
    if step == 'name':
        st['name'] = text; st['step'] = 'city'
        await message.answer("üèô –ú—ñ—Å—Ç–æ:\n<i>–î–æ–ø–æ–º–æ–∂–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –ø–æ–¥—ñ—ó.</i>",
                             reply_markup=get_back_button(), parse_mode="HTML"); return

    if step == 'city':
        st['city'] = text; st['step'] = 'photo'
        await message.answer("üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é:",
                             reply_markup=get_back_button()); return

    if step == 'interests':
        st['interests'] = [i.strip() for i in text.split(',')]
        try:
            await save_user_to_db(uid, st.get('phone',''), st.get('name',''), st.get('city',''), st.get('photo',''), ', '.join(st['interests']))
            await message.answer('‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', reply_markup=main_menu)
        except Exception as e:
            logging.error('save profile: %s', e)
            await message.answer('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å.', reply_markup=main_menu)
        st['step'] = 'menu'; return

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó
    if step == 'create_event_title':
        st['event_title'] = text; st['step'] = 'create_event_description'
        await message.answer("üìù –û–ø–∏—Å:\n<i>–ö—ñ–ª—å–∫–æ–º–∞ —Ä–µ—á–µ–Ω–Ω—è–º–∏, —â–æ–± —Ö–æ—Ç—ñ–ª–æ—Å—è –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è.</i>",
                             reply_markup=get_back_button(), parse_mode="HTML"); return

    if step == 'create_event_description':
        st['event_description'] = text; st['step'] = 'create_event_date'
        await message.answer("üìÖ –î–∞—Ç–∞ –π —á–∞—Å (YYYY-MM-DD HH:MM):\n<i>–ù–∞–ø—Ä.: 2025-10-12 19:30 (–º—ñ—Å—Ü–µ–≤–∏–π —á–∞—Å).</i>",
                             reply_markup=get_back_button(), parse_mode="HTML"); return

    if step == 'create_event_date':
        try:
            dt = datetime.strptime(text, '%Y-%m-%d %H:%M')
        except ValueError:
            await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: 2025-10-12 19:30",
                                 reply_markup=get_back_button()); return
        st['event_date'] = dt; st['step'] = 'create_event_location'
        await message.answer("üìç –õ–æ–∫–∞—Ü—ñ—è (–æ–ø—Ü—ñ–π–Ω–æ):\n<i>–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ—Ç–æ—á–∫y, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å.</i>",
                             reply_markup=location_choice_kb(), parse_mode="HTML"); return

    if step == 'create_event_location':
        if text == "üìù –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º":
            st['step'] = 'create_event_location_name'
            await message.answer("üè∑ –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É/–Ω–∞–∑–≤—É –º—ñ—Å—Ü—è:", reply_markup=get_back_button()); return
        if text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é":
            st['event_location'] = ''; st['event_lat'] = None; st['event_lon'] = None
            st['step'] = 'create_event_capacity'
            await message.answer("üë• –°–∫—ñ–ª—å–∫–∏ –≤—Å—å–æ–≥–æ –º—ñ—Å—Ü—å?\n<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –º—ñ—Å—Ç–∫—ñ—Å—Ç—å.</i>",
                                 reply_markup=get_back_button(), parse_mode="HTML"); return
        await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∫–Ω–æ–ø–∫–æ—é –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ.",
                             reply_markup=location_choice_kb()); return

    if step == 'create_event_location_name':
        st['event_location'] = text; st['step'] = 'create_event_capacity'
        await message.answer("üë• –°–∫—ñ–ª—å–∫–∏ –≤—Å—å–æ–≥–æ –º—ñ—Å—Ü—å?\n<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –º—ñ—Å—Ç–∫—ñ—Å—Ç—å.</i>",
                             reply_markup=get_back_button(), parse_mode="HTML"); return

    if step == 'create_event_capacity':
        try:
            cap = int(text); assert cap > 0
        except Exception:
            await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ.", reply_markup=get_back_button()); return
        st['capacity'] = cap; st['step'] = 'create_event_needed'
        await message.answer("üë§ –°–∫—ñ–ª—å–∫–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —à—É–∫–∞—î—Ç–µ?\n<i>–°–∫—ñ–ª—å–∫–∏ –±—Ä–∞–∫—É—î –¥–æ –ø–æ–≤–Ω–æ—ó –º—ñ—Å—Ç–∫–æ—Å—Ç—ñ.</i>",
                             reply_markup=get_back_button(), parse_mode="HTML"); return

    if step == 'create_event_needed':
        try:
            need = int(text); cap = st['capacity']; assert 0 < need <= cap
        except Exception:
            await message.answer(f"‚ùó –í—ñ–¥ 1 –¥–æ {st['capacity']}", reply_markup=get_back_button()); return
        st['needed_count'] = need; st['step'] = 'create_event_photo'
        await message.answer("üì∏ –§–æ—Ç–æ –ø–æ–¥—ñ—ó (–æ–ø—Ü—ñ–π–Ω–æ):\n<i>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏¬ª.</i>",
                             reply_markup=event_publish_kb(), parse_mode="HTML"); return

    if text == '‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏' and step == 'create_event_photo':
        try:
            await save_event_to_db(
                user_id=uid,
                creator_name=st.get('creator_name',''),
                creator_phone=st.get('creator_phone',''),
                title=st['event_title'],
                description=st['event_description'],
                date=st['event_date'],
                location=st.get('event_location',''),
                capacity=st['capacity'],
                needed_count=st['needed_count'],
                status='active',
                location_lat=st.get('event_lat'),
                location_lon=st.get('event_lon'),
                photo=st.get('event_photo')
            )
            await message.answer("üöÄ –ü–æ–¥—ñ—é –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!", reply_markup=main_menu)
        except Exception as e:
            logging.exception("publish")
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}", reply_markup=main_menu)
        user_states[uid] = {'step': 'menu'}; return

    if text == '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏' and step == 'create_event_photo':
        st['step'] = 'create_event_title'
        await message.answer("üìù –ù–æ–≤–∞ –Ω–∞–∑–≤–∞:", reply_markup=get_back_button()); return

    if text == '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' and step == 'create_event_photo':
        user_states[uid] = {'step': 'menu'}
        await message.answer("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu); return

    # –ü–æ—à—É–∫
    if step == 'search_menu' and text == "üîé –ó–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º":
        st['step'] = 'search_keyword_wait'
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ:\n<i>–®—É–∫–∞—î–º–æ –≤ –Ω–∞–∑–≤—ñ –π –æ–ø–∏—Å—ñ.</i>",
                             reply_markup=get_back_button(), parse_mode="HTML"); return

    if step == 'search_menu' and text == "üìç –ü–æ—Ä—É—á –∑—ñ –º–Ω–æ—é":
        st['step'] = 'search_geo_wait_location'
        await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç—ñ.",
                             reply_markup=location_choice_kb()); return

    if step == 'search_keyword_wait':
        rows = await find_events_by_kw(text, limit=10)
        if not rows:
            await message.answer("üòï –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu)
            user_states[uid] = {'step': 'menu'}; return
        await send_event_cards(message.chat.id, rows)
        user_states[uid] = {'step': 'menu'}; return

    if step == 'search_geo_wait_radius':
        try: radius = float(text)
        except ValueError: radius = 5.0
        lat, lon = st.get('search_lat'), st.get('search_lon')
        if lat is None or lon is None:
            await message.answer("–ù–µ –±–∞—á—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=location_choice_kb())
            st['step'] = 'search_geo_wait_location'; return
        rows = await find_events_near(lat, lon, radius, limit=10)
        if not rows:
            await message.answer("–ü–æ—Ä—É—á –ø–æ–¥—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòï", reply_markup=main_menu)
            user_states[uid] = {'step': 'menu'}; return
        await send_event_cards(message.chat.id, rows)
        user_states[uid] = {'step': 'menu'}; return

    if step == 'search_menu' and text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        user_states[uid] = {'step': 'menu'}
        await message.answer("–ú–µ–Ω—é:", reply_markup=main_menu); return

    # –†–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—è –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ
    conv = await get_active_conversation_for_user(uid)
    if conv:
        now = datetime.now(timezone.utc)
        # conv['expires_at'] —É–∂–µ timezone-aware; –ø—Ä–∏–≤–æ–¥–∏–º–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ UTC
        if conv['expires_at'] <= now:
            await close_conversation(conv['id'], reason='expired')
            await message.answer("‚åõ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ (—á–∞—Å –≤–∏—á–µ—Ä–ø–∞–Ω–æ).", reply_markup=main_menu)
            return
        partner_id = conv['seeker_id'] if uid == conv['organizer_id'] else conv['organizer_id']
        try:
            await bot.send_message(partner_id, f"üí¨ {message.from_user.full_name}:\n{text}")
        except Exception as e:
            logging.warning("relay failed: %s", e)
        return

    logging.info("Unhandled step=%s text=%s", step, text)

# –ì–µ–æ
@dp.message(F.location)
async def handle_location(message: types.Message):
    uid = message.from_user.id
    st = user_states.setdefault(uid, {})
    cur = st.get('step')

    if cur == 'create_event_location':
        st['event_lat'] = message.location.latitude
        st['event_lon'] = message.location.longitude
        st['step'] = 'create_event_location_name'
        await message.answer("üè∑ –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É/–Ω–∞–∑–≤—É –º—ñ—Å—Ü—è (–æ–ø—Ü—ñ–π–Ω–æ):", reply_markup=get_back_button()); return

    if cur == 'search_geo_wait_location':
        st['search_lat'] = message.location.latitude
        st['search_lon'] = message.location.longitude
        st['step'] = 'search_geo_wait_radius'
        await message.answer("üìè –†–∞–¥—ñ—É—Å —É –∫–º? (–¥–µ—Ñ–æ–ª—Ç 5). –ù–∞–¥—ñ—à–ª—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É.", reply_markup=radius_kb()); return

# --- JOIN: –∞–Ω—Ç–∏-—Å–ø–∞–º —ñ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—É ---
@dp.callback_query(F.data.startswith("join:"))
async def cb_join(call: types.CallbackQuery):
    event_id = int(call.data.split(":")[1])
    seeker_id = call.from_user.id
    try:
        conn = await asyncpg.connect(DATABASE_URL)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ –∑–∞—è–≤–∫–∞
        existing = await conn.fetchrow("SELECT id, status FROM requests WHERE event_id=$1 AND seeker_id=$2", event_id, seeker_id)
        if existing:
            st = existing['status']
            if st == 'pending':
                await call.answer("–ó–∞—è–≤–∫—É –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚úÖ", show_alert=True)
            elif st == 'approved':
                await call.answer("–ó–∞—è–≤–∫—É –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç —Ç—É—Ç!", show_alert=True)
            else:  # rejected
                await call.answer("–ù–∞ –∂–∞–ª—å, –≤–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.", show_alert=True)
            await conn.close()
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∑–∞—è–≤–∫—É
        req = await conn.fetchrow("""
            INSERT INTO requests (event_id, seeker_id)
            VALUES ($1,$2)
            RETURNING id
        """, event_id, seeker_id)

        ev = await conn.fetchrow("""
            SELECT id, title, user_id
            FROM events WHERE id=$1
        """, event_id)
        await conn.close()

        await call.answer("–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ‚úÖ", show_alert=False)

        # –ù–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—É
        if ev:
            uname = f"@{call.from_user.username}" if call.from_user.username else call.from_user.full_name
            await bot.send_message(
                ev["user_id"],
                f"üîî –ó–∞–ø–∏—Ç –Ω–∞ —É—á–∞—Å—Ç—å —É –ø–æ–¥—ñ—ó ‚Äú{ev['title']}‚Äù (#{ev['id']}).\n"
                f"–í—ñ–¥: {uname} (id {seeker_id}). –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏?",
                reply_markup=approve_kb(req["id"])
            )

    except Exception as e:
        logging.error("join error: %s", e)
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}", show_alert=True)

# --- APPROVE / REJECT + —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏ ---
@dp.callback_query(F.data.startswith("approve:"))
async def cb_approve(call: types.CallbackQuery):
    req_id = int(call.data.split(":")[1])
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        async with conn.transaction():
            req = await conn.fetchrow("SELECT * FROM requests WHERE id=$1 FOR UPDATE", req_id)
            if not req:
                await call.answer("–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return
            ev = await conn.fetchrow("SELECT * FROM events WHERE id=$1 FOR UPDATE", req['event_id'])
            if not ev:
                await call.answer("–ü–æ–¥—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return

            # –ë–µ–∑–ø–µ–∫–∞: –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É–≤–∞—Ç–∏ –º–æ–∂–µ —Ç—ñ–ª—å–∫–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä —Ü—å–æ–≥–æ —ñ–≤–µ–Ω—Ç–∞
            if call.from_user.id != ev['user_id']:
                await call.answer("–õ–∏—à–µ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä –º–æ–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏.", show_alert=True)
                return

            # —è–∫—â–æ –≤–∂–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ
            if req['status'] == 'approved':
                await call.answer("–í–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.", show_alert=True); return
            if req['status'] == 'rejected':
                await call.answer("–ó–∞—è–≤–∫—É –≤–∂–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.", show_alert=True); return

            # –º—ñ—Å—Ü—è
            if ev['needed_count'] is not None and ev['needed_count'] <= 0:
                await call.answer("–ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å.", show_alert=True); return

            await conn.execute("UPDATE requests SET status='approved' WHERE id=$1", req_id)
            await conn.execute("UPDATE events SET needed_count = GREATEST(COALESCE(needed_count,0)-1,0) WHERE id=$1", ev['id'])

            expires = datetime.now(timezone.utc) + timedelta(minutes=30)
            conv = await conn.fetchrow("""
                INSERT INTO conversations (event_id, organizer_id, seeker_id, expires_at)
                VALUES ($1,$2,$3,$4)
                RETURNING id, expires_at
            """, ev['id'], ev['user_id'], req['seeker_id'], expires)

        await conn.close()

        await call.answer("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", show_alert=False)

        # —Å—Ç–∞—Ä—Ç —á–∞—Ç—É
        try:
            until = conv['expires_at'].astimezone(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')
            await bot.send_message(req['seeker_id'],
                f"‚úÖ –í–∞—Å –ø—Ä–∏–π–Ω—è—Ç–æ –¥–æ –ø–æ–¥—ñ—ó ‚Äú{ev['title']}‚Äù.\n"
                f"üí¨ –ß–∞—Ç –∑ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–æ–º –∞–∫—Ç–∏–≤–Ω–∏–π –¥–æ {until}.\n"
                f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—É—Ç ‚Äî —è –ø–µ—Ä–µ—à–ª—é –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä—É.\n"
                f"–ö–æ–º–∞–Ω–¥–∞ /stopchat ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–∏.")
            await bot.send_message(ev['user_id'],
                f"‚úÖ –£—á–∞—Å–Ω–∏–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ (id {req['seeker_id']}).\n"
                f"–ß–∞—Ç –∞–∫—Ç–∏–≤–Ω–∏–π –¥–æ {until}. –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî —è –ø–µ—Ä–µ—à–ª—é —É—á–∞—Å–Ω–∏–∫—É.")
        except Exception as e:
            logging.warning("notify approve failed: %s", e)

    except Exception as e:
        logging.error("approve error: %s", e)
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}", show_alert=True)

@dp.callback_query(F.data.startswith("reject:"))
async def cb_reject(call: types.CallbackQuery):
    req_id = int(call.data.split(":")[1])
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        req = await conn.fetchrow("UPDATE requests SET status='rejected' WHERE id=$1 RETURNING seeker_id, event_id", req_id)
        ev = await conn.fetchrow("SELECT id, title, user_id FROM events WHERE id=$1", req['event_id']) if req else None
        await conn.close()

        if not req:
            await call.answer("–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True); return

        if ev and call.from_user.id != ev['user_id']:
            await call.answer("–õ–∏—à–µ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä –º–æ–∂–µ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏.", show_alert=True); return

        await call.answer("‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ", show_alert=False)
        if ev:
            try:
                await bot.send_message(req['seeker_id'], f"‚ùå –ù–∞ –∂–∞–ª—å, –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–¥—ñ—é ‚Äú{ev['title']}‚Äù –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
            except Exception:
                pass
    except Exception as e:
        logging.error("reject error: %s", e)
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}", show_alert=True)

# /stopchat ‚Äî —Ä—É—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
@dp.message(Command("stopchat"))
async def stop_chat(message: types.Message):
    uid = message.from_user.id
    conv = await get_active_conversation_for_user(uid)
    if not conv:
        await message.answer("–ê–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu); return
    await close_conversation(conv['id'], reason='closed')
    other = conv['seeker_id'] if uid == conv['organizer_id'] else conv['organizer_id']
    await message.answer("‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=main_menu)
    try:
        await bot.send_message(other, "‚ÑπÔ∏è –°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–≤ —á–∞—Ç.")
    except Exception:
        pass

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ–∫ –ø–æ–¥—ñ–π (–∑ –¥–∞–Ω–∏–º–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞ –∑ –Ω–∞—à–æ—ó –ë–î —ñ —Ñ–æ—Ç–æ)
async def send_event_cards(chat_id: int, rows: list[asyncpg.Record]):
    for r in rows:
        dt = r["date"].strftime('%Y-%m-%d %H:%M') if r["date"] else "‚Äî"
        loc_line = (r["location"] or "").strip() or (
            f"{r['location_lat']:.5f}, {r['location_lon']:.5f}" if r["location_lat"] is not None else "‚Äî"
        )
        organizer_name = r.get("organizer_name") or "‚Äî"
        org_interests = r.get("organizer_interests") or "‚Äî"
        org_count = r.get("org_count") or 0

        parts = [
            f"<b>{r['title']}</b> (#{r['id']})",
            f"üìÖ {dt}",
            f"üìç {loc_line}",
            f"üë§ –®—É–∫–∞—î–º–æ: {r['needed_count']}/{r['capacity']}",
            f"üëë –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä: {organizer_name} ¬∑ –ø–æ–¥—ñ–π: {org_count}",
            f"üéØ –Ü–Ω—Ç–µ—Ä–µ—Å–∏ –æ—Ä–≥.: {org_interests}"
        ]
        desc = (r['description'] or '').strip()
        if desc:
            parts.append("")
            parts.append(desc[:300] + ('‚Ä¶' if len(desc) > 300 else ''))
        caption = "\n".join(parts)

        kb = event_join_kb(r["id"])

        # –ü–æ–∫–∞–∑—É—î–º–æ —Ñ–æ—Ç–æ –ø–æ–¥—ñ—ó; —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î ‚Äî —Ñ–æ—Ç–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä–∞ (—è–∫—â–æ —î)
        photo_to_send = r.get('photo') or r.get('organizer_photo')
        if photo_to_send:
            try:
                await bot.send_photo(chat_id, photo_to_send, caption=caption, parse_mode="HTML", reply_markup=kb)
                continue
            except Exception as e:
                logging.warning("send photo failed, fallback to text: %s", e)

        await bot.send_message(chat_id, caption, parse_mode="HTML", reply_markup=kb)

# --- Geo handler (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –π –ø–æ—à—É–∫) ---
@dp.message(F.location)
async def handle_location(message: types.Message):
    uid = message.from_user.id
    st = user_states.setdefault(uid, {})
    cur = st.get('step')

    if cur == 'create_event_location':
        st['event_lat'] = message.location.latitude
        st['event_lon'] = message.location.longitude
        st['step'] = 'create_event_location_name'
        await message.answer("üè∑ –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É/–Ω–∞–∑–≤—É –º—ñ—Å—Ü—è (–æ–ø—Ü—ñ–π–Ω–æ):", reply_markup=get_back_button()); return

    if cur == 'search_geo_wait_location':
        st['search_lat'] = message.location.latitude
        st['search_lon'] = message.location.longitude
        st['step'] = 'search_geo_wait_radius'
        await message.answer("üìè –†–∞–¥—ñ—É—Å —É –∫–º? (–¥–µ—Ñ–æ–ª—Ç 5). –ù–∞–¥—ñ—à–ª—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É.", reply_markup=radius_kb()); return

# --- Entrypoint ---
async def main():
    logging.info('Starting polling')
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())








   





