import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
import os
import json

# --- –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ü–†–û–§–Ü–õ–Ø–ú–ò --- #

USERS_FILE = "users.json"

def load_users():
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_users(users_data):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users_data, f, ensure_ascii=False, indent=2)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ —é–∑–µ—Ä—ñ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
users = load_users()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}

# --- –ö–ù–û–ü–ö–ò –ì–û–õ–û–í–ù–û–ì–û –ú–ï–ù–Æ --- #
main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
    ],
    resize_keyboard=True
)

# --- –ö–ù–û–ü–ö–ò –î–õ–Ø –ü–û–®–£–ö–£ –ü–û–î–Ü–ô --- #
find_event_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üéØ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏")],
        [types.KeyboardButton(text="üìç –ü–æ–¥—ñ—ó –ø–æ—Ä—É—á (5 –∫–º)")],
        [types.KeyboardButton(text="üèô –í—Å—ñ –ø–æ–¥—ñ—ó –≤ –º—ñ—Å—Ç—ñ")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

# --- –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î --- #
back_button = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

# --- –û–ë–†–û–ë–ö–ê /start --- #
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)  # user_id —è–∫ —Å—Ç—Ä—ñ—á–∫–∞ –¥–ª—è JSON

    if user_id not in users:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞ —É –±–∞–∑—ñ ‚ûî —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
        user_states[user_id] = {"step": "authorization"}
        await message.answer(
            "üëã –ü—Ä–∏–≤—ñ—Ç, —Ç–∏ –ø–æ—Ç—Ä–∞–ø–∏–≤ —É Findsy! –¢—É—Ç –∑ –ª–µ–≥–∫—ñ—Å—Ç—é –∑–Ω–∞–π–¥–µ—à –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ –≤–µ—á—ñ—Ä –∞–±–æ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤ –¥–æ —Å–≤–æ—î—ó –∫–æ–º–ø–∞–Ω—ñ—ó! \n\n–®—É–∫–∞–π, —Å—Ç–≤–æ—Ä—é–π, –∑–∞–ø—Ä–æ—à—É–π, –≤–∑–∞—î–º–æ–¥—ñ–π —Ç–∞ —Å–ø—ñ–ª–∫—É–π—Å—è! üíõ",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="üìû –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å")]],
                resize_keyboard=True
            )
        )
    else:
        # –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –≤–∂–µ —î ‚ûî –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏ —ñ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é
        user_profile = users[user_id]
        user_states[user_id] = {"step": "menu"}
        await message.answer(
            f"üëã –ü—Ä–∏–≤—ñ—Ç –∑–Ω–æ–≤—É, {user_profile.get('name', '–¥—Ä—É–≥')}! –û–±–∏—Ä–∞–π, —â–æ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ:",
            reply_markup=main_menu
        )

@dp.message(F.text == "üìû –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å")
@dp.message(F.text == "üìû –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å")
async def authorize_step(message: types.Message):
    user_id = str(message.from_user.id)

    if user_id not in user_states:
        user_states[user_id] = {}

    user_states[user_id]["step"] = "phone"

    await message.answer(
        "üì≤ –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)],
                [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

@dp.message(F.contact)
@dp.message(F.contact)
async def get_phone(message: types.Message):
    user_id = str(message.from_user.id)

    if user_id not in user_states:
        user_states[user_id] = {}

    user_states[user_id]["phone"] = message.contact.phone_number
    user_states[user_id]["step"] = "name"

    await message.answer(
        "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
        reply_markup=back_button
    )


@dp.message(F.text & ~F.text.in_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
async def handle_steps(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")

    if step == "name":
        user_states[user_id]["name"] = message.text
        user_states[user_id]["step"] = "city"
        await message.answer(
            "üèô –î—è–∫—É—é! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:",
            reply_markup=back_button
        )

    elif step == "city":
        user_states[user_id]["city"] = message.text
        user_states[user_id]["step"] = "photo"
        await message.answer(
            "üñº –î—è–∫—É—é! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Å–≤—ñ—Ç–ª–∏–Ω—É (—Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é):",
            reply_markup=back_button
        )

    elif step == "interests":
        user_states[user_id]["interests"] = message.text.split(",")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å —É —Ñ–∞–π–ª users.json
        users[user_id] = {
            "phone": user_states[user_id]["phone"],
            "name": user_states[user_id]["name"],
            "city": user_states[user_id]["city"],
            "photo": user_states[user_id]["photo"],
            "interests": user_states[user_id]["interests"],
        }
        save_users(users)

        user_states[user_id]["step"] = "menu"
        await message.answer(
            "‚úÖ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ:",
            reply_markup=main_menu
        )

    if step == "menu":
        if message.text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é":
            await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:", reply_markup=back_button)
            user_states[user_id]["step"] = "create_event_title"
        elif message.text == "üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é":
            await message.answer("üîé –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–æ—à—É–∫—É:", reply_markup=find_event_menu)
            user_states[user_id]["step"] = "find_event_menu"
        elif message.text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
            profile = users.get(user_id, {})
            await message.answer(
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n–Ü–º'—è: {profile.get('name')}\n–ú—ñ—Å—Ç–æ: {profile.get('city')}\n–Ü–Ω—Ç–µ—Ä–µ—Å–∏: {', '.join(profile.get('interests', []))}",
                reply_markup=main_menu
            )

    elif step == "create_event_title":
        user_states[user_id]["event_title"] = message.text
        user_states[user_id]["step"] = "create_event_description"
        await message.answer("üñä –î–æ–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø–æ–¥—ñ—ó:", reply_markup=back_button)

    elif step == "create_event_description":
        user_states[user_id]["event_description"] = message.text
        user_states[user_id]["step"] = "create_event_datetime"
        await message.answer("üìÖ –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —ñ —á–∞—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è:", reply_markup=back_button)

    elif step == "create_event_datetime":
        user_states[user_id]["event_datetime"] = message.text
        user_states[user_id]["step"] = "create_event_location"
        await message.answer("üìç –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ –º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é:", reply_markup=back_button)

    elif step == "create_event_location":
        user_states[user_id]["event_location"] = message.text
        user_states[user_id]["step"] = "create_event_capacity"
        await message.answer("üë• –í–∫–∞–∂—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π:", reply_markup=back_button)

    elif step == "create_event_capacity":
        user_states[user_id]["event_capacity"] = message.text
        user_states[user_id]["step"] = "create_event_needed"
        await message.answer("‚ûï –í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π, —è–∫–∏—Ö —à—É–∫–∞—î—Ç–µ:", reply_markup=back_button)

    elif step == "create_event_needed":
        user_states[user_id]["event_needed"] = message.text
        user_states[user_id]["step"] = "menu"
        await message.answer("‚úÖ –ü–æ–¥—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ! –û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ:", reply_markup=main_menu)

    elif step == "find_event_menu":
        await message.answer("üîß –ü–æ—à—É–∫ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É –º–µ–Ω—é.", reply_markup=main_menu)
        user_states[user_id]["step"] = "menu"


@dp.message(F.photo)
async def get_photo(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")

    if step == "photo":
        user_states[user_id]["photo"] = message.photo[-1].file_id
        user_states[user_id]["step"] = "interests"
        await message.answer(
            "üéØ –î—è–∫—É—é! –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: —Ñ—É—Ç–±–æ–ª, –Ω–∞—Å—Ç–æ–ª–∫–∏, –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏):",
            reply_markup=back_button
        )


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    user_id = message.from_user.id
    step = user_states.get(user_id, {}).get("step")

    if step == "name":
        await authorize_step(message)
    elif step == "city":
        user_states[user_id]["step"] = "name"
        await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=back_button)
    elif step == "photo":
        user_states[user_id]["step"] = "city"
        await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=back_button)
    elif step == "interests":
        user_states[user_id]["step"] = "photo"
        await message.answer("üñº –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Å–≤—ñ—Ç–ª–∏–Ω—É:", reply_markup=back_button)
    else:
        await message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu)
        user_states[user_id]["step"] = "menu"

# --- –ó–ê–ü–£–°–ö --- #
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
