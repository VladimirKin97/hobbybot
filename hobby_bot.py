import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
import os

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ö–ù–û–ü–ö–ò –ì–û–õ–û–í–ù–û–ì–û –ú–ï–ù–Æ --- #
main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω—ñ—é")],
        [types.KeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
    ],
    resize_keyboard=True
)

# --- –ö–ù–û–ü–ö–ê –î–õ–Ø –ü–û–î–Ü–õ–ò–¢–ò–°–Ø –ö–û–ù–¢–ê–ö–¢–û–ú --- #
request_contact_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [
            types.KeyboardButton(
                text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                request_contact=True
            )
        ]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# --- –û–ë–†–û–ë–ö–ê /start --- #
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω—ñ—é –¥–ª—è —Ä–æ–∑–≤–∞–≥ —ñ –∑—É—Å—Ç—Ä—ñ—á–µ–π! üíö",
        reply_markup=main_menu
    )

# --- –û–ë–†–û–ë–ö–ê –í–ò–ë–û–†–£ –ú–ï–ù–Æ --- #
@dp.message(F.text == "üîç –ó–Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω—ñ—é")
async def find_company(message: types.Message):
    await message.answer(
        "üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–¥—ñ–π:\n- –ü–æ–∫–µ—Ä –æ 19:00\n- –ü—Ä–æ–≥—É–ª—è–Ω–∫–∞ –∑ —Å–æ–±–∞–∫–∞–º–∏ –æ 10:00\n- –ú–∞—Ñ—ñ—è –æ 20:00"
    )

@dp.message(F.text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")
async def create_event(message: types.Message):
    await message.answer(
        "üìÖ –©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é, –Ω–∞–ø–∏—à—ñ—Ç—å —ó—ó –Ω–∞–∑–≤—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–ø–æ–∫–∏ —â–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º!)"
    )

@dp.message(F.text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
async def my_profile(message: types.Message):
    await message.answer(
        "üì± –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:",
        reply_markup=request_contact_kb
    )

# --- –û–ë–†–û–ë–ö–ê –û–¢–†–ò–ú–ê–ù–ù–Ø –ö–û–ù–¢–ê–ö–¢–£ --- #
@dp.message()
async def handle_contact(message: types.Message):
    if message.contact:
        phone_number = message.contact.phone_number
        await message.answer(
            f"üì¢ –î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {phone_number}",
            reply_markup=main_menu
        )
    else:
        await message.answer(
            "üîé –Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é."
        )

# --- –ó–ê–ü–£–°–ö --- #
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

