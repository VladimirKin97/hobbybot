import logging
import asyncio
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart

# --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø --- #
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –§–ê–ô–õ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø --- #
USER_DATA_FILE = "users.json"

if os.path.exists(USER_DATA_FILE):
    with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
else:
    users = {}

def save_users(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

user_states = {}

# --- –ö–ù–û–ü–ö–ò --- #
main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
    ], resize_keyboard=True
)

back_button = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

# --- START --- #
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in users:
        await message.answer(
            f"üëã –í—ñ—Ç–∞—é, {users[user_id].get('name')}! –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
            reply_markup=main_menu
        )
        user_states[user_id] = {"step": "menu"}
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="üìû –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å")]],
                resize_keyboard=True
            )
        )
        user_states[user_id] = {"step": "authorization"}

@dp.message(F.text == "üìû –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å")
async def authorize_step(message: types.Message):
    user_id = str(message.from_user.id)
    user_states[user_id]["step"] = "phone"
    await message.answer(
        "üì≤ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)], [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )

@dp.message(F.contact)
async def get_phone(message: types.Message):
    user_id = str(message.from_user.id)
    user_states[user_id]["phone"] = message.contact.phone_number
    user_states[user_id]["step"] = "name"
    await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=back_button)

@dp.message(F.text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")
async def start_event_creation(message: types.Message):
    user_id = str(message.from_user.id)
    user_states[user_id]["step"] = "create_event_title"
    await message.answer(
        "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:\n\n"
        "üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É, —è–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—É—Ç—å –ø–æ–¥—ñ—ó.",
        reply_markup=back_button
    )

@dp.message(F.text & ~F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]))
async def handle_event_creation(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")

    if step == "create_event_title":
        user_states[user_id]["event_title"] = message.text
        user_states[user_id]["step"] = "create_event_description"
        await message.answer(
            "üìù –î–æ–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø–æ–¥—ñ—ó (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):",
            reply_markup=back_button
        )

    elif step == "create_event_description":
        user_states[user_id]["event_description"] = message.text[:200]
        user_states[user_id]["step"] = "create_event_datetime"
        await message.answer(
            "üìÖ –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2025-05-08 19:00):",
            reply_markup=back_button
        )

    elif step == "create_event_datetime":
        user_states[user_id]["event_datetime"] = message.text
        user_states[user_id]["step"] = "create_event_location"
        await message.answer(
            "üìç –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é:",
            reply_markup=back_button
        )

    elif step == "create_event_location":
        user_states[user_id]["event_location"] = message.text
        user_states[user_id]["step"] = "create_event_confirmation"
        await message.answer(
            "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:\n"
            f"üìõ –ù–∞–∑–≤–∞: {user_states[user_id]['event_title']}\n"
            f"üìù –û–ø–∏—Å: {user_states[user_id]['event_description']}\n"
            f"üìÖ –î–∞—Ç–∞ —ñ —á–∞—Å: {user_states[user_id]['event_datetime']}\n"
            f"üìç –ú—ñ—Å—Ü–µ: {user_states[user_id]['event_location']}\n\n"
            "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ / ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")],
                    [types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
                ],
                resize_keyboard=True
            )
        )

@dp.message(F.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
async def confirm_event(message: types.Message):
    user_id = str(message.from_user.id)
    await message.answer("üéâ –ü–æ–¥—ñ—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!", reply_markup=main_menu)

@dp.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_event(message: types.Message):
    user_id = str(message.from_user.id)
    await message.answer("‚ùóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu)

# --- –ó–ê–ü–£–°–ö --- #
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

   
