import logging
import asyncio
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart

# --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø --- #
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –§–ê–ô–õ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø --- #
USER_DATA_FILE = "users.json"

if os.path.exists(USER_DATA_FILE):
    with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
    for user_id in users:
        user_states[user_id] = {"step": "menu"}
else:
    users = {}

user_states = {}

def save_users(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# --- –ö–ù–û–ü–ö–ò --- #
main_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é")],
        [types.KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
    ], resize_keyboard=True
)

back_button = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

find_event_menu = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üîç –ü–æ–¥—ñ—ó –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏")],
        [types.KeyboardButton(text="üìç –ü–æ–¥—ñ—ó –±—ñ–ª—è –º–µ–Ω–µ")],
        [types.KeyboardButton(text="üèô –ü–æ–¥—ñ—ó —É –º—ñ—Å—Ç—ñ")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ], resize_keyboard=True
)

# --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó --- #
@dp.message(F.text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é")
async def start_event_creation(message: types.Message):
    user_id = str(message.from_user.id)
    user_states[user_id] = {"step": "create_event_title"}
    await message.answer(
        "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:", reply_markup=back_button
    )

@dp.message(F.text & ~F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]))
async def create_event_steps(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")

    if step == "create_event_title":
        user_states[user_id]["event_title"] = message.text
        user_states[user_id]["step"] = "create_event_description"
        await message.answer(
            "üñä –î–æ–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø–æ–¥—ñ—ó (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):",
            reply_markup=back_button
        )

    elif step == "create_event_description":
        user_states[user_id]["event_description"] = message.text[:200]
        user_states[user_id]["step"] = "create_event_datetime"
        await message.answer(
            "üìÖ –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2025-05-08 19:00):",
            reply_markup=back_button
        )

    elif step == "create_event_datetime":
        user_states[user_id]["event_datetime"] = message.text
        user_states[user_id]["step"] = "create_event_location"
        await message.answer(
            "üìç –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (–º—ñ—Å—Ç–æ, –∞–¥—Ä–µ—Å–∞):",
            reply_markup=back_button
        )

    elif step == "create_event_location":
        user_states[user_id]["event_location"] = message.text
        user_states[user_id]["step"] = "create_event_capacity"
        await message.answer(
            "üë• –í–∫–∞–∂—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤:",
            reply_markup=back_button
        )

    elif step == "create_event_capacity":
        user_states[user_id]["event_capacity"] = message.text
        user_states[user_id]["step"] = "create_event_needed"
        await message.answer(
            "‚ûï –í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π, —è–∫–∏—Ö —â–µ —à—É–∫–∞—î—Ç–µ:",
            reply_markup=back_button
        )

    elif step == "create_event_needed":
        user_states[user_id]["event_needed"] = message.text
        user_states[user_id]["step"] = "confirm_event"
        await message.answer(
            f"‚úÖ –ü–æ–¥—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n–ù–∞–∑–≤–∞: {user_states[user_id]['event_title']}\n–û–ø–∏—Å: {user_states[user_id]['event_description']}\n–î–∞—Ç–∞ —ñ —á–∞—Å: {user_states[user_id]['event_datetime']}\n–ú—ñ—Å—Ü–µ: {user_states[user_id]['event_location']}\n–£—á–∞—Å–Ω–∏–∫–∏: {user_states[user_id]['event_capacity']} (–ø–æ—Ç—Ä—ñ–±–Ω–æ: {user_states[user_id]['event_needed']})",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"), types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
                resize_keyboard=True
            )
        )

# --- –ó–ê–ü–£–°–ö --- #
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
