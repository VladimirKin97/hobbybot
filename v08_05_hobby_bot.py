import logging
import asyncio
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart

# --- INITIALIZATION ---
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- DATA FILE ---
USER_DATA_FILE = "users.json"
if os.path.exists(USER_DATA_FILE):
    with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
else:
    users = {}

# Utility functions

def save_users(data):
    with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def load_users():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

users = load_users()
user_states = {}

# --- KEYBOARDS ---
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(types.KeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é"))
main_menu.add(types.KeyboardButton("üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é"))
main_menu.add(types.KeyboardButton("üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"))

back_button = types.ReplyKeyboardMarkup(resize_keyboard=True)
back_button.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

find_event_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
find_event_menu.add(types.KeyboardButton("üîç –ü–æ–¥—ñ—ó –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏"))
find_event_menu.add(types.KeyboardButton("üìç –ü–æ–¥—ñ—ó –±—ñ–ª—è –º–µ–Ω–µ"))
find_event_menu.add(types.KeyboardButton("üèô –ü–æ–¥—ñ—ó —É –º—ñ—Å—Ç—ñ"))
find_event_menu.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

# --- HANDLERS ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in users:
        user_states[user_id] = {"step": "menu"}
        await message.answer(
            f"üëã –í—ñ—Ç–∞—é, {users[user_id]['name']}! –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
            reply_markup=main_menu
        )
    else:
        user_states[user_id] = {"step": "authorization"}
        await message.answer(
            "üëã –ü—Ä–∏–≤—ñ—Ç, —Ç–∏ –ø–æ—Ç—Ä–∞–ø–∏–≤ —É Findsy! –¢—É—Ç –∑ –ª–µ–≥–∫—ñ—Å—Ç—é –∑–Ω–∞–π–¥–µ—à –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ –≤–µ—á—ñ—Ä –∞–±–æ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤ –¥–æ —Å–≤–æ—î—ó –∫–æ–º–ø–∞–Ω—ñ—ó! üíõ",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="üìû –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å")]],
                resize_keyboard=True
            )
        )

@dp.message(F.text == "üìû –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å")
async def authorize_step(message: types.Message):
    user_id = str(message.from_user.id)
    user_states[user_id]["step"] = "phone"
    await message.answer(
        "üì≤ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
                [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.contact)
async def get_phone(message: types.Message):
    user_id = str(message.from_user.id)
    user_states[user_id]["phone"] = message.contact.phone_number
    user_states[user_id]["step"] = "name"
    await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=back_button)

@dp.message(F.photo)
async def get_photo(message: types.Message):
    user_id = str(message.from_user.id)
    if user_states.get(user_id, {}).get("step") == "photo":
        user_states[user_id]["photo"] = message.photo[-1].file_id
        user_states[user_id]["step"] = "interests"
        await message.answer("üéØ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É:", reply_markup=back_button)

@dp.message(F.text & ~F.text.in_(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']))
async def handle_steps(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")

    # Registration flow
    if step == "name":
        user_states[user_id]["name"] = message.text
        user_states[user_id]["step"] = "city"
        await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=back_button)

    elif step == "city":
        user_states[user_id]["city"] = message.text
        user_states[user_id]["step"] = "photo"
        await message.answer("üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Å–≤—ñ—Ç–ª–∏–Ω—É:", reply_markup=back_button)

    elif step == "interests":
        user_states[user_id]["interests"] = [i.strip() for i in message.text.split(",")]
        users[user_id] = {
            "phone": user_states[user_id]["phone"],
            "name": user_states[user_id]["name"],
            "city": user_states[user_id]["city"],
            "photo": user_states[user_id]["photo"],
            "interests": user_states[user_id]["interests"]
        }
        save_users(users)
        user_states[user_id]["step"] = "menu"
        await message.answer("‚úÖ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=main_menu)

    # Main menu actions
    elif step == "menu":
        text = message.text
        if text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
            profile = users.get(user_id, {})
            if profile.get("photo"):
                await message.answer_photo(
                    photo=profile["photo"],
                    caption=(
                        f"üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n\n"
                        f"üìõ –Ü–º'—è: {profile.get('name')}\n"
                        f"üèô –ú—ñ—Å—Ç–æ: {profile.get('city')}\n"
                        f"üéØ –Ü–Ω—Ç–µ—Ä–µ—Å–∏: {', '.join(profile.get('interests', []))}"
                    ),
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=[
                            [types.KeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å")],
                            [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
            else:
                await message.answer("‚ùóÔ∏è–§–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu)

        elif text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å":
            phone = users[user_id]["phone"]
            user_states[user_id] = {"step": "name", "phone": phone}
            await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:", reply_markup=back_button)

        elif text == "üîç –ó–Ω–∞–π—Ç–∏ –ø–æ–¥—ñ—é":
            user_states[user_id]["step"] = "find_event_menu"
            await message.answer("üîé –û–±–µ—Ä—ñ—Ç—å —è–∫ —à—É–∫–∞—Ç–∏ –ø–æ–¥—ñ—ó:", reply_markup=find_event_menu)

        elif text == "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é":
            user_states[user_id]["step"] = "create_event_title"
            await message.answer(
                "üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó:\n\n"
                "üîç *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:* –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ç–∞ —á—ñ—Ç–∫—É –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó.",
                reply_markup=back_button
            )
        else:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.", reply_markup=main_menu)

    # Find event options
    elif step == "find_event_menu":
        if message.text in ["üîç –ü–æ–¥—ñ—ó –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏", "üìç –ü–æ–¥—ñ—ó –±—ñ–ª—è –º–µ–Ω–µ", "üèô –ü–æ–¥—ñ—ó —É –º—ñ—Å—Ç—ñ"]:
            # TODO: implement search logic
            await message.answer("üîé –®—É–∫–∞—é –ø–æ–¥—ñ—ó...", reply_markup=main_menu)
            user_states[user_id]["step"] = "menu"
        else:
            await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –ø–æ—à—É–∫—É:", reply_markup=find_event_menu)

@dp.message(F.text & ~F.text.in_(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']))
async def create_event_steps(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")

    if step == "create_event_title":
        user_states[user_id]["event_title"] = message.text
        user_states[user_id]["step"] = "create_event_description"
        await message.answer(
            "üñä –î–æ–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø–æ–¥—ñ—ó (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):",
            reply_markup=back_button
        )
    elif step == "create_event_description":
        user_states[user_id]["event_description"] = message.text[:200]
        user_states[user_id]["step"] = "create_event_datetime"
        await message.answer(
            "üìÖ –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2025-05-08 19:00):",
            reply_markup=back_button
        )
    elif step == "create_event_datetime":
        user_states[user_id]["event_datetime"] = message.text
        user_states[user_id]["step"] = "create_event_location"
        await message.answer(
            "üìç –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (–º—ñ—Å—Ç–æ, –∞–¥—Ä–µ—Å–∞) –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é:",
            reply_markup=back_button
        )
    elif step == "create_event_location":
        user_states[user_id]["event_location"] = message.text
        user_states[user_id]["step"] = "create_event_capacity"
        await message.answer(
            "üë• –í–∫–∞–∂—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤:",
            reply_markup=back_button
        )
    elif step == "create_event_capacity":
        user_states[user_id]["event_capacity"] = message.text
        user_states[user_id]["step"] = "create_event_needed"
        await message.answer(
            "‚ûï –í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π, —è–∫–∏—Ö —â–µ —à—É–∫–∞—î—Ç–µ:",
            reply_markup=back_button
        )
    elif step == "create_event_needed":
        user_states[user_id]["event_needed"] = message.text
        user_states[user_id]["step"] = "menu"
        # TODO: save event data
        await message.answer("‚úÖ –ü–æ–¥—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.", reply_markup=main_menu)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    user_id = str(message.from_user.id)
    step = user_states.get(user_id, {}).get("step")

    if step in ["name", "city", "photo", "interests"]:
        # Go back in registration
        if step == "name":
            await authorize_step(message)
        elif step == "city":
            user_states[user_id]["step"] = "name"
            await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:", reply_markup=back_button)
        elif step == "photo":
            user_states[user_id]["step"] = "city"
            await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=back_button)
        elif step == "interests":
            user_states[user_id]["step"] = "photo"
            await message.answer("üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Å–≤—ñ—Ç–ª–∏–Ω—É:", reply_markup=back_button)
    else:
        user_states[user_id]["step"] = "menu"
        await message.answer("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu)

# --- RUN ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

